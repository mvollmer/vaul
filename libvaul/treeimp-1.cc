// generated by ctree



#include <vaul/tree.h>
#include <vaul/binfile.h>
#include <vaul/lexer.h>

#include <stdio.h>
#include <stream.h>

#define NEW_NODE_PLACEMENT  (((vaul_graph_reader *)placement_hint)->pool)
#include "tree.m"

#define WRITE_ATTR(x, gr)   (((vaul_graph_writer *)(gr))->file->put(x))
#define READ_ATTR(x, f)	    (((vaul_graph_reader *)(gr))->file->get(x))

#define GRAPH_MARKER_GROW 1024

#ifndef PRINT_ATTR
#define PRINT_ATTR(x, gr) (cout << (x) << "\n")
#endif
#ifndef WRITE_ATTR
#define WRITE_ATTR(x, gr)
#endif

#ifndef READ_ATTR
#define READ_ATTR(x, gr)
#endif

#define GRAPH_INVALID_KIND nkInvalid
#define GRAPH_XREF_KIND nkXRef
#define GRAPH_LREF_KIND nkLRef
/* inserted into graph implementation

  Copyright (C) 1994-1996 University of Dortmund
  Department of Electrical Engineering, AG SIV
  All Rights Reserved.

  Permission to use, copy, modify and distribute this software and its
  documentation for non-commercial purposes is hereby granted,
  provided that both the copyright notice and this permission notice
  appear in all copies of the software, derivative works or modified
  versions, and any portions thereof, and that both notices appear in
  supporting documentation.

  THE UNIVERSITY OF DORTMUND ALLOWS FREE USE OF THIS SOFTWARE
  IN ITS "AS IS" CONDITION.  THE UNIVERSITY OF DORTMUND DISCLAIMS
  ANY LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING
  FROM THE USE OF THIS SOFTWARE.

  The University of Dortmund requests users of this software
  to return to

       Arbeitsgebiet Schaltungen der Signalverarbeitung
       Fakultät für Elektrotechnik
       Universität Dortmund
       44221 Dortmund, Germany

  or `msipc@nt.e-technik.uni-dortmund.de' any improvements or
  extensions that they make and grant the University of Dortmund
  the unlimited use and distribution of these changes.

  Read README.LICENSING for further information.

*/

#include <assert.h>

#ifndef GRAPH_MARKER_GROW
#define GRAPH_MARKER_GROW 512
#endif

graph_marker::graph_marker(graph_region_id id)
{
    assert(id != GRAPH_NULL_REGION_ID);

    region_id = id;
    n_marks = max_marks = 0;
    marks = NULL;
}

graph_marker::~graph_marker()
{
    delete[] marks;
}

bool graph_marker::marked(graph_base_node *n)
{
    assert(n->get_region_id() != GRAPH_NULL_REGION_ID);

    if(graph_base_node *n2 = find_node(n->label)) {
	assert(n2 == n);
	return true;
    }
    return false;
}

void graph_marker::mark(graph_base_node *n)
{
    assert(n->get_region_id() != GRAPH_NULL_REGION_ID);

    if(n->label < 0)
	n->label = n_marks;

    if(n->label >= max_marks) {
	int new_max = n->label + (GRAPH_MARKER_GROW 
				  - (n->label % GRAPH_MARKER_GROW));
	graph_base_node **new_marks = new (graph_base_node *)[new_max];
	memcpy(new_marks, marks, sizeof(graph_base_node*) * n_marks);
	memset(new_marks+n_marks, 0, 
	       sizeof(graph_base_node*) * (new_max-n_marks));
	delete[] marks;
	marks = new_marks;
	max_marks = new_max;
    }

    assert(marks[n->label] == NULL);
    marks[n->label] = n;
    if(n->label >= n_marks)
	n_marks = n->label+1;
}

graph_base_node *graph_marker::find_node(int label)
{
    if(label >= 0 && label < n_marks)
	return marks[label];
    return NULL;
}


graph_visitor::graph_visitor(graph_region_id id)
    : graph_marker(id)
{
}

graph_visitor::~graph_visitor()
{
}

void graph_visitor::visit(graph_visit_f *pre,
			  graph_visit_f *post,
			  graph_base_node *n)
{
    if(n && n->get_region_id() == region_id && !marked(n)) {
	mark(n);
	if(pre)
	    pre(n, this);
	n->visit(pre, post, this);
	if(post)
	    post(n, this);
    }
}

graph_printer::graph_printer(graph_region_id id)
    : graph_marker(id)
{
    level = 0;
}

graph_printer::~graph_printer()
{
}

void graph_printer::print(graph_base_node *n)
{
    if(n == NULL) {
	print_string("<nil>\n");
    } else if(n->get_region_id() != region_id) {
	print_xref(n);
	print_string("\n");
    } else if(!marked(n)) {
	mark(n);
	print_header(n);
	level++;
	n->print(this);
	level--;
    } else {
	print_lref(n);
	print_string("\n");
    }
}

void graph_printer::print_xref(graph_base_node *n)
{
    printf("xref to %p,%d (%s)", 
	   (void *)(n->get_region_id()), n->get_label(), n->type_id());
}

void graph_printer::print_lref(graph_base_node *n)
{
    printf("%s[%d]", n->type_id(), n->get_label());
}

void graph_printer::print_header(graph_base_node *n)
{
    printf("%s[%d]:\n", n->type_id(), n->get_label());
}

void graph_printer::print_string(const char *str)
{
    printf("%s", str);
}

void graph_printer::print_lab(const char *lab)
{
    for(int i = 0; i < level; i++)
	print_string(" ");
    print_string(lab);
    print_string(": ");
}


graph_writer::graph_writer(graph_region_id id)
    : graph_marker(id)
{
}

graph_writer::~graph_writer()
{
}

void graph_writer::write(graph_base_node *n)
{
    if(n == NULL) {
	write_kind(GRAPH_INVALID_KIND);
	return;
    }

    if(n->get_region_id() == GRAPH_NULL_REGION_ID)
	n->set_region_id(region_id);
    else if(n->get_region_id() != region_id) {
	write_kind(GRAPH_XREF_KIND);
	write_xref(n);
	return;
    }

    if(!marked(n)) {
	mark(n);
	write_kind(n->kind());
	n->write(this);
    } else {
	write_kind(GRAPH_LREF_KIND);
	write_label(n->label);
    }
}

void graph_writer::write_kind(graph_node_kind k)
{
}

void graph_writer::write_xref(graph_base_node *n)
{
}

void graph_writer::write_label(int l)
{
}


graph_reader::graph_reader(graph_region_id id)
    : graph_marker(id)
{
}

graph_reader::~graph_reader()
{
}

graph_base_node *graph_reader::read(graph_node_kind expected)
{
    graph_node_kind k;
    graph_base_node *n;

    k = read_kind();

    if(k == GRAPH_INVALID_KIND)
	return NULL;
    else if(k == GRAPH_XREF_KIND)
	n = read_xref();
    else if(k == GRAPH_LREF_KIND) {
	int label = read_label();
	n = find_node(label);
	assert(n);
    } else {
	n = graph_base_node::create(k, this);
	assert(n != NULL);
	n->set_region_id(region_id);
	mark(n);
	n->read(this);
    }

    if(n && !n->is(expected)) {
	read_error(k, expected);
	n = NULL;
    }

    return n;
}

graph_base_node *graph_reader::find_node(int label)
{
    return graph_marker::find_node(label);
}
char *__nIds[] = {
	"Invalid!", "?", "?",
	"Node", 
	"Dummy", 
	"AssociationList", 
	"CompInstList", 
	"IncrementalBindingIndic", 
	"BindingIndic", 
	"ComponentSpec", 
	"WaveformElement", 
	"SignalList", 
	"Association", 
	"PosNode", 
	"InstList", 
	"InstList_OTHERS", 
	"InstList_ALL", 
	"InstList_Ids", 
	"ConfigSpec", 
	"CondalSignalAssign", 
	"CondalWaveform", 
	"IterationScheme", 
	"PreForScheme", 
	"ForScheme", 
	"WhileScheme", 
	"CaseAlternative", 
	"Statement", 
	"AssertStat", 
	"SignalAssignment", 
	"WaitStat", 
	"ProcedureCallStat", 
	"NullStat", 
	"LoopControlStat", 
	"ExitStat", 
	"NextStat", 
	"LoopStat", 
	"CaseStat", 
	"IfStat", 
	"VarAssignment", 
	"ReturnStat", 
	"DummyStat", 
	"Choice", 
	"OthersChoice", 
	"NamedChoice", 
	"RangeChoice", 
	"ExprChoice", 
	"ElemAssoc", 
	"ArrAggrAssoc", 
	"OthersArrAggrAssoc", 
	"RangeArrAggrAssoc", 
	"SliceArrAggrAssoc", 
	"SingleArrAggrAssoc", 
	"RecAggrAssoc", 
	"EntityNameList", 
	"EntityNameList_OTHERS", 
	"EntityNameList_ALL", 
	"EntityNameList_Ids", 
	"EntitySpec", 
	"AttributeSpec", 
	"IndexValue", 
	"GenAssocElem", 
	"RangeAssocElem", 
	"SubtypeAssocElem", 
	"NamedAssocElem", 
	"Expr", 
	"AmbgAggregate", 
	"ArtificialAmbgAggregate", 
	"Aggregate", 
	"ArrayAggregate", 
	"RecordAggregate", 
	"ArrayAttr", 
	"ArrayAttr_LENGTH", 
	"ArrayAttr_ASCENDING", 
	"ArrayAttr_LOW", 
	"ArrayAttr_HIGH", 
	"ArrayAttr_RIGHT", 
	"ArrayAttr_LEFT", 
	"AttrFunctionCall", 
	"AttrTypeFunc", 
	"Attr_RIGHTOF", 
	"Attr_LEFTOF", 
	"Attr_PRED", 
	"Attr_SUCC", 
	"Attr_VAL", 
	"Attr_POS", 
	"Attr_VALUE", 
	"Attr_IMAGE", 
	"Attr_ASCENDING", 
	"Attr_HIGH", 
	"Attr_LOW", 
	"Attr_RIGHT", 
	"Attr_LEFT", 
	"AttrSigFunc", 
	"Attr_DRIVING_VALUE", 
	"Attr_DRIVING", 
	"Attr_LAST_VALUE", 
	"Attr_LAST_ACTIVE", 
	"Attr_LAST_EVENT", 
	"Attr_ACTIVE", 
	"Attr_EVENT", 
	"PrimaryExpr", 
	"AmbgEnumLitRef", 
	"EnumLitRef", 
	"ObjectRef", 
	"AttrSignalRef", 
	"Attr_TRANSACTION", 
	"Attr_QUIET", 
	"Attr_STABLE", 
	"Attr_DELAYED", 
	"GenericArrayObjectRef", 
	"SliceObjectRef", 
	"ArrayObjectRef", 
	"RecordObjectRef", 
	"AccessObjectRef", 
	"SimpleObjectRef", 
	"NullExpr", 
	"AmbgNullExpr", 
	"ArrayLiteralRef", 
	"AmbgArrayLitRef", 
	"LiteralRef", 
	"PhysicalLiteralRef", 
	"OpenExpr", 
	"NewExpr", 
	"QualifiedExpr", 
	"TypeConversion", 
	"AmbgCall", 
	"ProcedureCall", 
	"FunctionCall", 
	"UnresolvedName", 
	"RecordElement", 
	"IndexType", 
	"Constraint", 
	"IndexConstraint", 
	"PreIndexConstraint", 
	"PreIndexSubtypeConstraint", 
	"PreIndexRangeConstraint", 
	"Range", 
	"ArrayRange", 
	"ArrayAttr_REVERSE_RANGE", 
	"ArrayAttr_RANGE", 
	"ExplicitRange", 
	"AttributeValue", 
	"Declaration", 
	"Label", 
	"ConstantBody", 
	"Object", 
	"Interface", 
	"File", 
	"Alias", 
	"Signal", 
	"GuardSignal", 
	"Constant", 
	"Variable", 
	"EnumLiteral", 
	"PhysicalUnit", 
	"Type", 
	"DummyType", 
	"FileType", 
	"CompositeType", 
	"RecordType", 
	"ArrayType", 
	"SubarrayType", 
	"ScalarType", 
	"EnumType", 
	"NumericType", 
	"PhysicalType", 
	"FloatingType", 
	"UniversalReal", 
	"IntegerType", 
	"UniversalInteger", 
	"AccessType", 
	"SubType", 
	"IncompleteType", 
	"IndirectDecl", 
	"LibNameDecl", 
	"Attribute", 
	"AttributedDeclaration", 
	"Scope", 
	"BaseConfig", 
	"CompConfig", 
	"BlockConfig", 
	"ConcurrentStatement", 
	"ComponentInst", 
	"Component", 
	"Configuration", 
	"Block", 
	"BlockStat", 
	"Architecture", 
	"Entity", 
	"Process", 
	"LoopScope", 
	"SubprogramBody", 
	"Subprogram", 
	"Function", 
	"PredefOp", 
	"Procedure", 
	"PackageBody", 
	"Package", 
	"StandardPackage", 
	"TopScope", 
	"SelNameList", 
	"Name", 
	"AttributeName", 
	"IftsName", 
	"SelName", 
	"OpSymbol", 
	"SimpleName", 
	"IdList"	/* 205 kinds */

};

nKind __nLastDerived[] = {
	nkInvalid, nkInvalid, nkInvalid,
	nkIdList, 
	nkAssociationList, 
	nkAssociationList, 
	nkCompInstList, 
	nkIncrementalBindingIndic, 
	nkBindingIndic, 
	nkComponentSpec, 
	nkWaveformElement, 
	nkSignalList, 
	nkAssociation, 
	nkIdList, 
	nkInstList_Ids, 
	nkInstList_OTHERS, 
	nkInstList_ALL, 
	nkInstList_Ids, 
	nkConfigSpec, 
	nkCondalSignalAssign, 
	nkCondalWaveform, 
	nkWhileScheme, 
	nkPreForScheme, 
	nkForScheme, 
	nkWhileScheme, 
	nkCaseAlternative, 
	nkDummyStat, 
	nkAssertStat, 
	nkSignalAssignment, 
	nkWaitStat, 
	nkProcedureCallStat, 
	nkNullStat, 
	nkNextStat, 
	nkExitStat, 
	nkNextStat, 
	nkLoopStat, 
	nkCaseStat, 
	nkIfStat, 
	nkVarAssignment, 
	nkReturnStat, 
	nkDummyStat, 
	nkExprChoice, 
	nkOthersChoice, 
	nkNamedChoice, 
	nkRangeChoice, 
	nkExprChoice, 
	nkElemAssoc, 
	nkSingleArrAggrAssoc, 
	nkOthersArrAggrAssoc, 
	nkSliceArrAggrAssoc, 
	nkSliceArrAggrAssoc, 
	nkSingleArrAggrAssoc, 
	nkRecAggrAssoc, 
	nkEntityNameList_Ids, 
	nkEntityNameList_OTHERS, 
	nkEntityNameList_ALL, 
	nkEntityNameList_Ids, 
	nkEntitySpec, 
	nkAttributeSpec, 
	nkIndexValue, 
	nkNamedAssocElem, 
	nkRangeAssocElem, 
	nkSubtypeAssocElem, 
	nkNamedAssocElem, 
	nkUnresolvedName, 
	nkArtificialAmbgAggregate, 
	nkArtificialAmbgAggregate, 
	nkRecordAggregate, 
	nkArrayAggregate, 
	nkRecordAggregate, 
	nkArrayAttr_LEFT, 
	nkArrayAttr_LENGTH, 
	nkArrayAttr_ASCENDING, 
	nkArrayAttr_LOW, 
	nkArrayAttr_HIGH, 
	nkArrayAttr_RIGHT, 
	nkArrayAttr_LEFT, 
	nkAttr_EVENT, 
	nkAttr_LEFT, 
	nkAttr_RIGHTOF, 
	nkAttr_LEFTOF, 
	nkAttr_PRED, 
	nkAttr_SUCC, 
	nkAttr_VAL, 
	nkAttr_POS, 
	nkAttr_VALUE, 
	nkAttr_IMAGE, 
	nkAttr_ASCENDING, 
	nkAttr_HIGH, 
	nkAttr_LOW, 
	nkAttr_RIGHT, 
	nkAttr_LEFT, 
	nkAttr_EVENT, 
	nkAttr_DRIVING_VALUE, 
	nkAttr_DRIVING, 
	nkAttr_LAST_VALUE, 
	nkAttr_LAST_ACTIVE, 
	nkAttr_LAST_EVENT, 
	nkAttr_ACTIVE, 
	nkAttr_EVENT, 
	nkOpenExpr, 
	nkAmbgEnumLitRef, 
	nkEnumLitRef, 
	nkSimpleObjectRef, 
	nkAttr_DELAYED, 
	nkAttr_TRANSACTION, 
	nkAttr_QUIET, 
	nkAttr_STABLE, 
	nkAttr_DELAYED, 
	nkArrayObjectRef, 
	nkSliceObjectRef, 
	nkArrayObjectRef, 
	nkRecordObjectRef, 
	nkAccessObjectRef, 
	nkSimpleObjectRef, 
	nkNullExpr, 
	nkAmbgNullExpr, 
	nkArrayLiteralRef, 
	nkAmbgArrayLitRef, 
	nkPhysicalLiteralRef, 
	nkPhysicalLiteralRef, 
	nkOpenExpr, 
	nkNewExpr, 
	nkQualifiedExpr, 
	nkTypeConversion, 
	nkAmbgCall, 
	nkProcedureCall, 
	nkFunctionCall, 
	nkUnresolvedName, 
	nkRecordElement, 
	nkIndexType, 
	nkExplicitRange, 
	nkIndexConstraint, 
	nkPreIndexRangeConstraint, 
	nkPreIndexSubtypeConstraint, 
	nkPreIndexRangeConstraint, 
	nkExplicitRange, 
	nkArrayAttr_RANGE, 
	nkArrayAttr_REVERSE_RANGE, 
	nkArrayAttr_RANGE, 
	nkExplicitRange, 
	nkAttributeValue, 
	nkTopScope, 
	nkLabel, 
	nkConstantBody, 
	nkVariable, 
	nkInterface, 
	nkFile, 
	nkAlias, 
	nkGuardSignal, 
	nkGuardSignal, 
	nkConstant, 
	nkVariable, 
	nkEnumLiteral, 
	nkPhysicalUnit, 
	nkIncompleteType, 
	nkDummyType, 
	nkFileType, 
	nkSubarrayType, 
	nkRecordType, 
	nkSubarrayType, 
	nkSubarrayType, 
	nkUniversalInteger, 
	nkEnumType, 
	nkUniversalInteger, 
	nkPhysicalType, 
	nkUniversalReal, 
	nkUniversalReal, 
	nkUniversalInteger, 
	nkUniversalInteger, 
	nkAccessType, 
	nkSubType, 
	nkIncompleteType, 
	nkIndirectDecl, 
	nkLibNameDecl, 
	nkAttribute, 
	nkTopScope, 
	nkTopScope, 
	nkBlockConfig, 
	nkCompConfig, 
	nkBlockConfig, 
	nkProcess, 
	nkComponentInst, 
	nkEntity, 
	nkConfiguration, 
	nkEntity, 
	nkBlockStat, 
	nkArchitecture, 
	nkEntity, 
	nkProcess, 
	nkLoopScope, 
	nkSubprogramBody, 
	nkProcedure, 
	nkPredefOp, 
	nkPredefOp, 
	nkProcedure, 
	nkPackageBody, 
	nkStandardPackage, 
	nkStandardPackage, 
	nkTopScope, 
	nkSelNameList, 
	nkSimpleName, 
	nkAttributeName, 
	nkIftsName, 
	nkSelName, 
	nkOpSymbol, 
	nkSimpleName, 
	nkIdList
};
nKind __nBaseKind[] = {
	nkInvalid, nkInvalid, nkInvalid,
	nkInvalid, 
	nkNode, 
	nkDummy, 
	nkNode, 
	nkNode, 
	nkNode, 
	nkNode, 
	nkNode, 
	nkNode, 
	nkNode, 
	nkNode, 
	nkPosNode, 
	nkInstList, 
	nkInstList, 
	nkInstList, 
	nkPosNode, 
	nkPosNode, 
	nkPosNode, 
	nkPosNode, 
	nkIterationScheme, 
	nkIterationScheme, 
	nkIterationScheme, 
	nkPosNode, 
	nkPosNode, 
	nkStatement, 
	nkStatement, 
	nkStatement, 
	nkStatement, 
	nkStatement, 
	nkStatement, 
	nkLoopControlStat, 
	nkLoopControlStat, 
	nkStatement, 
	nkStatement, 
	nkStatement, 
	nkStatement, 
	nkStatement, 
	nkStatement, 
	nkPosNode, 
	nkChoice, 
	nkChoice, 
	nkChoice, 
	nkChoice, 
	nkPosNode, 
	nkPosNode, 
	nkArrAggrAssoc, 
	nkArrAggrAssoc, 
	nkRangeArrAggrAssoc, 
	nkArrAggrAssoc, 
	nkPosNode, 
	nkPosNode, 
	nkEntityNameList, 
	nkEntityNameList, 
	nkEntityNameList, 
	nkPosNode, 
	nkPosNode, 
	nkPosNode, 
	nkPosNode, 
	nkGenAssocElem, 
	nkGenAssocElem, 
	nkGenAssocElem, 
	nkPosNode, 
	nkExpr, 
	nkAmbgAggregate, 
	nkExpr, 
	nkAggregate, 
	nkAggregate, 
	nkExpr, 
	nkArrayAttr, 
	nkArrayAttr, 
	nkArrayAttr, 
	nkArrayAttr, 
	nkArrayAttr, 
	nkArrayAttr, 
	nkExpr, 
	nkAttrFunctionCall, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrTypeFunc, 
	nkAttrFunctionCall, 
	nkAttrSigFunc, 
	nkAttrSigFunc, 
	nkAttrSigFunc, 
	nkAttrSigFunc, 
	nkAttrSigFunc, 
	nkAttrSigFunc, 
	nkAttrSigFunc, 
	nkExpr, 
	nkPrimaryExpr, 
	nkPrimaryExpr, 
	nkPrimaryExpr, 
	nkObjectRef, 
	nkAttrSignalRef, 
	nkAttrSignalRef, 
	nkAttrSignalRef, 
	nkAttrSignalRef, 
	nkObjectRef, 
	nkGenericArrayObjectRef, 
	nkGenericArrayObjectRef, 
	nkObjectRef, 
	nkObjectRef, 
	nkObjectRef, 
	nkPrimaryExpr, 
	nkPrimaryExpr, 
	nkPrimaryExpr, 
	nkPrimaryExpr, 
	nkPrimaryExpr, 
	nkLiteralRef, 
	nkPrimaryExpr, 
	nkExpr, 
	nkExpr, 
	nkExpr, 
	nkExpr, 
	nkExpr, 
	nkExpr, 
	nkExpr, 
	nkPosNode, 
	nkPosNode, 
	nkPosNode, 
	nkConstraint, 
	nkConstraint, 
	nkPreIndexConstraint, 
	nkPreIndexConstraint, 
	nkConstraint, 
	nkRange, 
	nkArrayRange, 
	nkArrayRange, 
	nkRange, 
	nkPosNode, 
	nkPosNode, 
	nkDeclaration, 
	nkDeclaration, 
	nkDeclaration, 
	nkObject, 
	nkObject, 
	nkObject, 
	nkObject, 
	nkSignal, 
	nkObject, 
	nkObject, 
	nkDeclaration, 
	nkDeclaration, 
	nkDeclaration, 
	nkType, 
	nkType, 
	nkType, 
	nkCompositeType, 
	nkCompositeType, 
	nkArrayType, 
	nkType, 
	nkScalarType, 
	nkScalarType, 
	nkNumericType, 
	nkNumericType, 
	nkFloatingType, 
	nkNumericType, 
	nkIntegerType, 
	nkType, 
	nkType, 
	nkType, 
	nkDeclaration, 
	nkDeclaration, 
	nkDeclaration, 
	nkDeclaration, 
	nkAttributedDeclaration, 
	nkScope, 
	nkBaseConfig, 
	nkBaseConfig, 
	nkScope, 
	nkConcurrentStatement, 
	nkConcurrentStatement, 
	nkComponent, 
	nkComponent, 
	nkBlock, 
	nkBlock, 
	nkBlock, 
	nkConcurrentStatement, 
	nkScope, 
	nkScope, 
	nkScope, 
	nkSubprogram, 
	nkFunction, 
	nkSubprogram, 
	nkScope, 
	nkScope, 
	nkPackage, 
	nkScope, 
	nkPosNode, 
	nkPosNode, 
	nkName, 
	nkName, 
	nkName, 
	nkName, 
	nkName, 
	nkPosNode
};


void sNode::print(graph_printer *gp)
{
}

void sNode::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
}

void sNode::write(graph_writer *gw)
{
}

void sNode::read(graph_reader *gr)
{
}

nKind sNode::kind()
{
	return nkNode;
}

char *sNode::type_id()
{
	return type_id(kind());
}

bool sNode::is(nKind k)
{
	if(this == NULL) return false;
	nKind this_k = kind();
	return this_k >= k && this_k <= __nLastDerived[k];
}

bool sNode::is_base_of(nKind b, nKind d)
{
	return d >= b && d <= __nLastDerived[b];
}

char *sNode::type_id(nKind k)
{
	return __nIds[k];
}

nKind sNode::base_kind(nKind k)
{
	return __nBaseKind[k];
}

nNode sNode::create(nKind k, void *placement_hint)
{
	switch(k) {
	case nkInvalid:
		return NULL;
	case nkNode:
		return mNode();
	case nkPosNode:
		return mPosNode();
	case nkIdList:
		return mIdList();
	case nkName:
		return mName();
	case nkSimpleName:
		return mSimpleName();
	case nkOpSymbol:
		return mOpSymbol();
	case nkSelName:
		return mSelName();
	case nkIftsName:
		return mIftsName();
	case nkAttributeName:
		return mAttributeName();
	case nkSelNameList:
		return mSelNameList();
	case nkDeclaration:
		return mDeclaration();
	case nkAttributedDeclaration:
		return mAttributedDeclaration();
	case nkAttribute:
		return mAttribute();
	case nkAttributeValue:
		return mAttributeValue();
	case nkScope:
		return mScope();
	case nkTopScope:
		return mTopScope();
	case nkLibNameDecl:
		return mLibNameDecl();
	case nkIndirectDecl:
		return mIndirectDecl();
	case nkPackage:
		return mPackage();
	case nkStandardPackage:
		return mStandardPackage();
	case nkPackageBody:
		return mPackageBody();
	case nkType:
		return mType();
	case nkConstraint:
		return mConstraint();
	case nkRange:
		return mRange();
	case nkExplicitRange:
		return mExplicitRange();
	case nkArrayRange:
		return mArrayRange();
	case nkArrayAttr_RANGE:
		return mArrayAttr_RANGE();
	case nkArrayAttr_REVERSE_RANGE:
		return mArrayAttr_REVERSE_RANGE();
	case nkPreIndexConstraint:
		return mPreIndexConstraint();
	case nkPreIndexRangeConstraint:
		return mPreIndexRangeConstraint();
	case nkPreIndexSubtypeConstraint:
		return mPreIndexSubtypeConstraint();
	case nkIndexConstraint:
		return mIndexConstraint();
	case nkIncompleteType:
		return mIncompleteType();
	case nkSubType:
		return mSubType();
	case nkAccessType:
		return mAccessType();
	case nkScalarType:
		return mScalarType();
	case nkNumericType:
		return mNumericType();
	case nkIntegerType:
		return mIntegerType();
	case nkFloatingType:
		return mFloatingType();
	case nkUniversalInteger:
		return mUniversalInteger();
	case nkUniversalReal:
		return mUniversalReal();
	case nkPhysicalType:
		return mPhysicalType();
	case nkPhysicalUnit:
		return mPhysicalUnit();
	case nkEnumType:
		return mEnumType();
	case nkEnumLiteral:
		return mEnumLiteral();
	case nkCompositeType:
		return mCompositeType();
	case nkArrayType:
		return mArrayType();
	case nkIndexType:
		return mIndexType();
	case nkSubarrayType:
		return mSubarrayType();
	case nkRecordType:
		return mRecordType();
	case nkRecordElement:
		return mRecordElement();
	case nkFileType:
		return mFileType();
	case nkDummyType:
		return mDummyType();
	case nkObject:
		return mObject();
	case nkVariable:
		return mVariable();
	case nkConstant:
		return mConstant();
	case nkConstantBody:
		return mConstantBody();
	case nkSignal:
		return mSignal();
	case nkGuardSignal:
		return mGuardSignal();
	case nkAlias:
		return mAlias();
	case nkFile:
		return mFile();
	case nkSubprogram:
		return mSubprogram();
	case nkProcedure:
		return mProcedure();
	case nkFunction:
		return mFunction();
	case nkPredefOp:
		return mPredefOp();
	case nkInterface:
		return mInterface();
	case nkSubprogramBody:
		return mSubprogramBody();
	case nkExpr:
		return mExpr();
	case nkUnresolvedName:
		return mUnresolvedName();
	case nkFunctionCall:
		return mFunctionCall();
	case nkProcedureCall:
		return mProcedureCall();
	case nkAmbgCall:
		return mAmbgCall();
	case nkGenAssocElem:
		return mGenAssocElem();
	case nkNamedAssocElem:
		return mNamedAssocElem();
	case nkSubtypeAssocElem:
		return mSubtypeAssocElem();
	case nkRangeAssocElem:
		return mRangeAssocElem();
	case nkAssociation:
		return mAssociation();
	case nkTypeConversion:
		return mTypeConversion();
	case nkQualifiedExpr:
		return mQualifiedExpr();
	case nkNewExpr:
		return mNewExpr();
	case nkPrimaryExpr:
		return mPrimaryExpr();
	case nkOpenExpr:
		return mOpenExpr();
	case nkLiteralRef:
		return mLiteralRef();
	case nkAmbgArrayLitRef:
		return mAmbgArrayLitRef();
	case nkArrayLiteralRef:
		return mArrayLiteralRef();
	case nkPhysicalLiteralRef:
		return mPhysicalLiteralRef();
	case nkAmbgNullExpr:
		return mAmbgNullExpr();
	case nkNullExpr:
		return mNullExpr();
	case nkObjectRef:
		return mObjectRef();
	case nkSimpleObjectRef:
		return mSimpleObjectRef();
	case nkAccessObjectRef:
		return mAccessObjectRef();
	case nkRecordObjectRef:
		return mRecordObjectRef();
	case nkGenericArrayObjectRef:
		return mGenericArrayObjectRef();
	case nkArrayObjectRef:
		return mArrayObjectRef();
	case nkIndexValue:
		return mIndexValue();
	case nkSliceObjectRef:
		return mSliceObjectRef();
	case nkEnumLitRef:
		return mEnumLitRef();
	case nkAmbgEnumLitRef:
		return mAmbgEnumLitRef();
	case nkAttrSignalRef:
		return mAttrSignalRef();
	case nkAttr_DELAYED:
		return mAttr_DELAYED();
	case nkAttr_STABLE:
		return mAttr_STABLE();
	case nkAttr_QUIET:
		return mAttr_QUIET();
	case nkAttr_TRANSACTION:
		return mAttr_TRANSACTION();
	case nkAttrFunctionCall:
		return mAttrFunctionCall();
	case nkAttrSigFunc:
		return mAttrSigFunc();
	case nkAttr_EVENT:
		return mAttr_EVENT();
	case nkAttr_ACTIVE:
		return mAttr_ACTIVE();
	case nkAttr_LAST_EVENT:
		return mAttr_LAST_EVENT();
	case nkAttr_LAST_ACTIVE:
		return mAttr_LAST_ACTIVE();
	case nkAttr_LAST_VALUE:
		return mAttr_LAST_VALUE();
	case nkAttr_DRIVING:
		return mAttr_DRIVING();
	case nkAttr_DRIVING_VALUE:
		return mAttr_DRIVING_VALUE();
	case nkAttrTypeFunc:
		return mAttrTypeFunc();
	case nkAttr_LEFT:
		return mAttr_LEFT();
	case nkAttr_RIGHT:
		return mAttr_RIGHT();
	case nkAttr_LOW:
		return mAttr_LOW();
	case nkAttr_HIGH:
		return mAttr_HIGH();
	case nkAttr_ASCENDING:
		return mAttr_ASCENDING();
	case nkAttr_IMAGE:
		return mAttr_IMAGE();
	case nkAttr_VALUE:
		return mAttr_VALUE();
	case nkAttr_POS:
		return mAttr_POS();
	case nkAttr_VAL:
		return mAttr_VAL();
	case nkAttr_SUCC:
		return mAttr_SUCC();
	case nkAttr_PRED:
		return mAttr_PRED();
	case nkAttr_LEFTOF:
		return mAttr_LEFTOF();
	case nkAttr_RIGHTOF:
		return mAttr_RIGHTOF();
	case nkArrayAttr:
		return mArrayAttr();
	case nkArrayAttr_LEFT:
		return mArrayAttr_LEFT();
	case nkArrayAttr_RIGHT:
		return mArrayAttr_RIGHT();
	case nkArrayAttr_HIGH:
		return mArrayAttr_HIGH();
	case nkArrayAttr_LOW:
		return mArrayAttr_LOW();
	case nkArrayAttr_ASCENDING:
		return mArrayAttr_ASCENDING();
	case nkArrayAttr_LENGTH:
		return mArrayAttr_LENGTH();
	case nkAttributeSpec:
		return mAttributeSpec();
	case nkEntitySpec:
		return mEntitySpec();
	case nkEntityNameList:
		return mEntityNameList();
	case nkEntityNameList_Ids:
		return mEntityNameList_Ids();
	case nkEntityNameList_ALL:
		return mEntityNameList_ALL();
	case nkEntityNameList_OTHERS:
		return mEntityNameList_OTHERS();
	case nkAggregate:
		return mAggregate();
	case nkRecordAggregate:
		return mRecordAggregate();
	case nkRecAggrAssoc:
		return mRecAggrAssoc();
	case nkArrayAggregate:
		return mArrayAggregate();
	case nkArrAggrAssoc:
		return mArrAggrAssoc();
	case nkSingleArrAggrAssoc:
		return mSingleArrAggrAssoc();
	case nkRangeArrAggrAssoc:
		return mRangeArrAggrAssoc();
	case nkSliceArrAggrAssoc:
		return mSliceArrAggrAssoc();
	case nkOthersArrAggrAssoc:
		return mOthersArrAggrAssoc();
	case nkAmbgAggregate:
		return mAmbgAggregate();
	case nkArtificialAmbgAggregate:
		return mArtificialAmbgAggregate();
	case nkElemAssoc:
		return mElemAssoc();
	case nkChoice:
		return mChoice();
	case nkExprChoice:
		return mExprChoice();
	case nkRangeChoice:
		return mRangeChoice();
	case nkNamedChoice:
		return mNamedChoice();
	case nkOthersChoice:
		return mOthersChoice();
	case nkLabel:
		return mLabel();
	case nkStatement:
		return mStatement();
	case nkDummyStat:
		return mDummyStat();
	case nkReturnStat:
		return mReturnStat();
	case nkVarAssignment:
		return mVarAssignment();
	case nkIfStat:
		return mIfStat();
	case nkCaseStat:
		return mCaseStat();
	case nkCaseAlternative:
		return mCaseAlternative();
	case nkLoopStat:
		return mLoopStat();
	case nkLoopScope:
		return mLoopScope();
	case nkIterationScheme:
		return mIterationScheme();
	case nkWhileScheme:
		return mWhileScheme();
	case nkForScheme:
		return mForScheme();
	case nkPreForScheme:
		return mPreForScheme();
	case nkLoopControlStat:
		return mLoopControlStat();
	case nkNextStat:
		return mNextStat();
	case nkExitStat:
		return mExitStat();
	case nkNullStat:
		return mNullStat();
	case nkProcedureCallStat:
		return mProcedureCallStat();
	case nkWaitStat:
		return mWaitStat();
	case nkSignalList:
		return mSignalList();
	case nkWaveformElement:
		return mWaveformElement();
	case nkSignalAssignment:
		return mSignalAssignment();
	case nkAssertStat:
		return mAssertStat();
	case nkConcurrentStatement:
		return mConcurrentStatement();
	case nkProcess:
		return mProcess();
	case nkCondalWaveform:
		return mCondalWaveform();
	case nkCondalSignalAssign:
		return mCondalSignalAssign();
	case nkComponent:
		return mComponent();
	case nkBlock:
		return mBlock();
	case nkEntity:
		return mEntity();
	case nkArchitecture:
		return mArchitecture();
	case nkBlockStat:
		return mBlockStat();
	case nkComponentInst:
		return mComponentInst();
	case nkConfigSpec:
		return mConfigSpec();
	case nkComponentSpec:
		return mComponentSpec();
	case nkInstList:
		return mInstList();
	case nkInstList_Ids:
		return mInstList_Ids();
	case nkInstList_ALL:
		return mInstList_ALL();
	case nkInstList_OTHERS:
		return mInstList_OTHERS();
	case nkBindingIndic:
		return mBindingIndic();
	case nkIncrementalBindingIndic:
		return mIncrementalBindingIndic();
	case nkConfiguration:
		return mConfiguration();
	case nkBaseConfig:
		return mBaseConfig();
	case nkBlockConfig:
		return mBlockConfig();
	case nkCompConfig:
		return mCompConfig();
	case nkCompInstList:
		return mCompInstList();
	case nkDummy:
		return mDummy();
	case nkAssociationList:
		return mAssociationList();
	default:
		assert(false);
	}
}

void sPosNode::print(graph_printer *gp)
{
	sNode::print(gp);
	gp->print_lab("lineno"); PRINT_ATTR(lineno, gp);
}

void sPosNode::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNode::visit(pre, post, gv);
}

void sPosNode::write(graph_writer *gw)
{
	sNode::write(gw);
	WRITE_ATTR(lineno, gw);
}

void sPosNode::read(graph_reader *gr)
{
	sNode::read(gr);
	READ_ATTR(lineno, gr);
}

nKind sPosNode::kind()
{
	return nkPosNode;
}

void sIdList::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("id"); PRINT_ATTR(id, gp);
	gp->print_lab("link"); gp->print(link);
}

void sIdList::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, link);
}

void sIdList::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(link);
	WRITE_ATTR(id, gw);
}

void sIdList::read(graph_reader *gr)
{
	sPosNode::read(gr);
	link = nIdList(gr->read(nkIdList));
	READ_ATTR(id, gr);
}

nKind sIdList::kind()
{
	return nkIdList;
}

nIdList reverse(nIdList &l)
{
	nIdList n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->link;
		n->link = r;
		r = n;
	}
	return r;
}

void sName::print(graph_printer *gp)
{
	sPosNode::print(gp);
}

void sName::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
}

void sName::write(graph_writer *gw)
{
	sPosNode::write(gw);
}

void sName::read(graph_reader *gr)
{
	sPosNode::read(gr);
}

nKind sName::kind()
{
	return nkName;
}

void sSimpleName::print(graph_printer *gp)
{
	sName::print(gp);
	gp->print_lab("id"); PRINT_ATTR(id, gp);
}

void sSimpleName::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sName::visit(pre, post, gv);
}

void sSimpleName::write(graph_writer *gw)
{
	sName::write(gw);
	WRITE_ATTR(id, gw);
}

void sSimpleName::read(graph_reader *gr)
{
	sName::read(gr);
	READ_ATTR(id, gr);
}

nKind sSimpleName::kind()
{
	return nkSimpleName;
}

void sOpSymbol::print(graph_printer *gp)
{
	sName::print(gp);
	gp->print_lab("op"); PRINT_ATTR(op, gp);
}

void sOpSymbol::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sName::visit(pre, post, gv);
}

void sOpSymbol::write(graph_writer *gw)
{
	sName::write(gw);
	WRITE_ATTR(op, gw);
}

void sOpSymbol::read(graph_reader *gr)
{
	sName::read(gr);
	READ_ATTR(op, gr);
}

nKind sOpSymbol::kind()
{
	return nkOpSymbol;
}

void sSelName::print(graph_printer *gp)
{
	sName::print(gp);
	gp->print_lab("prefix"); gp->print(prefix);
	gp->print_lab("suffix"); PRINT_ATTR(suffix, gp);
}

void sSelName::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sName::visit(pre, post, gv);
	gv->visit(pre, post, prefix);
}

void sSelName::write(graph_writer *gw)
{
	sName::write(gw);
	gw->write(prefix);
	WRITE_ATTR(suffix, gw);
}

void sSelName::read(graph_reader *gr)
{
	sName::read(gr);
	prefix = nName(gr->read(nkName));
	READ_ATTR(suffix, gr);
}

nKind sSelName::kind()
{
	return nkSelName;
}

void sIftsName::print(graph_printer *gp)
{
	sName::print(gp);
	gp->print_lab("prefix"); gp->print(prefix);
	gp->print_lab("assoc"); gp->print(assoc);
}

void sIftsName::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sName::visit(pre, post, gv);
	gv->visit(pre, post, prefix);
	gv->visit(pre, post, assoc);
}

void sIftsName::write(graph_writer *gw)
{
	sName::write(gw);
	gw->write(prefix);
	gw->write(assoc);
}

void sIftsName::read(graph_reader *gr)
{
	sName::read(gr);
	prefix = nName(gr->read(nkName));
	assoc = nGenAssocElem(gr->read(nkGenAssocElem));
}

nKind sIftsName::kind()
{
	return nkIftsName;
}

void sAttributeName::print(graph_printer *gp)
{
	sName::print(gp);
	gp->print_lab("prefix"); gp->print(prefix);
	gp->print_lab("attribute"); PRINT_ATTR(attribute, gp);
	gp->print_lab("first_actual"); gp->print(first_actual);
}

void sAttributeName::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sName::visit(pre, post, gv);
	gv->visit(pre, post, prefix);
	gv->visit(pre, post, first_actual);
}

void sAttributeName::write(graph_writer *gw)
{
	sName::write(gw);
	gw->write(prefix);
	gw->write(first_actual);
	WRITE_ATTR(attribute, gw);
}

void sAttributeName::read(graph_reader *gr)
{
	sName::read(gr);
	prefix = nName(gr->read(nkName));
	first_actual = nNamedAssocElem(gr->read(nkNamedAssocElem));
	READ_ATTR(attribute, gr);
}

nKind sAttributeName::kind()
{
	return nkAttributeName;
}

void sSelNameList::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("name"); gp->print(name);
	gp->print_lab("link"); gp->print(link);
}

void sSelNameList::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, name);
	gv->visit(pre, post, link);
}

void sSelNameList::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(name);
	gw->write(link);
}

void sSelNameList::read(graph_reader *gr)
{
	sPosNode::read(gr);
	name = nSelName(gr->read(nkSelName));
	link = nSelNameList(gr->read(nkSelNameList));
}

nKind sSelNameList::kind()
{
	return nkSelNameList;
}

nSelNameList reverse(nSelNameList &l)
{
	nSelNameList n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->link;
		n->link = r;
		r = n;
	}
	return r;
}

void sDeclaration::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next_decl"); gp->print(next_decl);
	gp->print_lab("id"); PRINT_ATTR(id, gp);
	gp->print_lab("scope"); gp->print(scope);
}

void sDeclaration::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next_decl);
	gv->visit(pre, post, scope);
}

void sDeclaration::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next_decl);
	gw->write(scope);
	WRITE_ATTR(id, gw);
}

void sDeclaration::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next_decl = nDeclaration(gr->read(nkDeclaration));
	scope = nScope(gr->read(nkScope));
	READ_ATTR(id, gr);
}

nKind sDeclaration::kind()
{
	return nkDeclaration;
}

nDeclaration reverse(nDeclaration &l)
{
	nDeclaration n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next_decl;
		n->next_decl = r;
		r = n;
	}
	return r;
}

void sAttributedDeclaration::print(graph_printer *gp)
{
	sDeclaration::print(gp);
	gp->print_lab("first_attribute"); gp->print(first_attribute);
}

void sAttributedDeclaration::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDeclaration::visit(pre, post, gv);
	gv->visit(pre, post, first_attribute);
}

void sAttributedDeclaration::write(graph_writer *gw)
{
	sDeclaration::write(gw);
	gw->write(first_attribute);
}

void sAttributedDeclaration::read(graph_reader *gr)
{
	sDeclaration::read(gr);
	first_attribute = nAttributeValue(gr->read(nkAttributeValue));
}

nKind sAttributedDeclaration::kind()
{
	return nkAttributedDeclaration;
}

void sAttribute::print(graph_printer *gp)
{
	sDeclaration::print(gp);
	gp->print_lab("type"); gp->print(type);
}

void sAttribute::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDeclaration::visit(pre, post, gv);
	gv->visit(pre, post, type);
}

void sAttribute::write(graph_writer *gw)
{
	sDeclaration::write(gw);
	gw->write(type);
}

void sAttribute::read(graph_reader *gr)
{
	sDeclaration::read(gr);
	type = nType(gr->read(nkType));
}

nKind sAttribute::kind()
{
	return nkAttribute;
}

void sAttributeValue::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next"); gp->print(next);
	gp->print_lab("attribute"); gp->print(attribute);
	gp->print_lab("value"); gp->print(value);
}

void sAttributeValue::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
	gv->visit(pre, post, attribute);
	gv->visit(pre, post, value);
}

void sAttributeValue::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next);
	gw->write(attribute);
	gw->write(value);
}

void sAttributeValue::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next = nAttributeValue(gr->read(nkAttributeValue));
	attribute = nAttribute(gr->read(nkAttribute));
	value = nExpr(gr->read(nkExpr));
}

nKind sAttributeValue::kind()
{
	return nkAttributeValue;
}

nAttributeValue reverse(nAttributeValue &l)
{
	nAttributeValue n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sScope::print(graph_printer *gp)
{
	sAttributedDeclaration::print(gp);
	gp->print_lab("continued"); gp->print(continued);
	gp->print_lab("first_decl"); gp->print(first_decl);
}

void sScope::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttributedDeclaration::visit(pre, post, gv);
	gv->visit(pre, post, continued);
	gv->visit(pre, post, first_decl);
}

void sScope::write(graph_writer *gw)
{
	sAttributedDeclaration::write(gw);
	gw->write(continued);
	gw->write(first_decl);
}

void sScope::read(graph_reader *gr)
{
	sAttributedDeclaration::read(gr);
	continued = nScope(gr->read(nkScope));
	first_decl = nDeclaration(gr->read(nkDeclaration));
}

nKind sScope::kind()
{
	return nkScope;
}

nScope reverse(nScope &l)
{
	nScope n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->continued;
		n->continued = r;
		r = n;
	}
	return r;
}

void sTopScope::print(graph_printer *gp)
{
	sScope::print(gp);
}

void sTopScope::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sScope::visit(pre, post, gv);
}

void sTopScope::write(graph_writer *gw)
{
	sScope::write(gw);
}

void sTopScope::read(graph_reader *gr)
{
	sScope::read(gr);
}

nKind sTopScope::kind()
{
	return nkTopScope;
}

void sLibNameDecl::print(graph_printer *gp)
{
	sDeclaration::print(gp);
}

void sLibNameDecl::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDeclaration::visit(pre, post, gv);
}

void sLibNameDecl::write(graph_writer *gw)
{
	sDeclaration::write(gw);
}

void sLibNameDecl::read(graph_reader *gr)
{
	sDeclaration::read(gr);
}

nKind sLibNameDecl::kind()
{
	return nkLibNameDecl;
}

void sIndirectDecl::print(graph_printer *gp)
{
	sDeclaration::print(gp);
	gp->print_lab("ind_scope"); gp->print(ind_scope);
}

void sIndirectDecl::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDeclaration::visit(pre, post, gv);
	gv->visit(pre, post, ind_scope);
}

void sIndirectDecl::write(graph_writer *gw)
{
	sDeclaration::write(gw);
	gw->write(ind_scope);
}

void sIndirectDecl::read(graph_reader *gr)
{
	sDeclaration::read(gr);
	ind_scope = nPackage(gr->read(nkPackage));
}

nKind sIndirectDecl::kind()
{
	return nkIndirectDecl;
}

void sPackage::print(graph_printer *gp)
{
	sScope::print(gp);
}

void sPackage::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sScope::visit(pre, post, gv);
}

void sPackage::write(graph_writer *gw)
{
	sScope::write(gw);
}

void sPackage::read(graph_reader *gr)
{
	sScope::read(gr);
}

nKind sPackage::kind()
{
	return nkPackage;
}

void sStandardPackage::print(graph_printer *gp)
{
	sPackage::print(gp);
	gp->print_lab("predef_BIT"); gp->print(predef_BIT);
	gp->print_lab("predef_BOOLEAN"); gp->print(predef_BOOLEAN);
	gp->print_lab("predef_INTEGER"); gp->print(predef_INTEGER);
	gp->print_lab("predef_REAL"); gp->print(predef_REAL);
	gp->print_lab("predef_TIME"); gp->print(predef_TIME);
	gp->print_lab("predef_STRING"); gp->print(predef_STRING);
	gp->print_lab("predef_BIT_VECTOR"); gp->print(predef_BIT_VECTOR);
	gp->print_lab("predef_SEVERITY_LEVEL"); gp->print(predef_SEVERITY_LEVEL);
	gp->print_lab("predef_FILE_OPEN_KIND"); gp->print(predef_FILE_OPEN_KIND);
	gp->print_lab("universal_integer"); gp->print(universal_integer);
	gp->print_lab("universal_real"); gp->print(universal_real);
}

void sStandardPackage::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPackage::visit(pre, post, gv);
	gv->visit(pre, post, predef_BIT);
	gv->visit(pre, post, predef_BOOLEAN);
	gv->visit(pre, post, predef_INTEGER);
	gv->visit(pre, post, predef_REAL);
	gv->visit(pre, post, predef_TIME);
	gv->visit(pre, post, predef_STRING);
	gv->visit(pre, post, predef_BIT_VECTOR);
	gv->visit(pre, post, predef_SEVERITY_LEVEL);
	gv->visit(pre, post, predef_FILE_OPEN_KIND);
	gv->visit(pre, post, universal_integer);
	gv->visit(pre, post, universal_real);
}

void sStandardPackage::write(graph_writer *gw)
{
	sPackage::write(gw);
	gw->write(predef_BIT);
	gw->write(predef_BOOLEAN);
	gw->write(predef_INTEGER);
	gw->write(predef_REAL);
	gw->write(predef_TIME);
	gw->write(predef_STRING);
	gw->write(predef_BIT_VECTOR);
	gw->write(predef_SEVERITY_LEVEL);
	gw->write(predef_FILE_OPEN_KIND);
	gw->write(universal_integer);
	gw->write(universal_real);
}

void sStandardPackage::read(graph_reader *gr)
{
	sPackage::read(gr);
	predef_BIT = nType(gr->read(nkType));
	predef_BOOLEAN = nType(gr->read(nkType));
	predef_INTEGER = nType(gr->read(nkType));
	predef_REAL = nType(gr->read(nkType));
	predef_TIME = nType(gr->read(nkType));
	predef_STRING = nType(gr->read(nkType));
	predef_BIT_VECTOR = nType(gr->read(nkType));
	predef_SEVERITY_LEVEL = nType(gr->read(nkType));
	predef_FILE_OPEN_KIND = nType(gr->read(nkType));
	universal_integer = nUniversalInteger(gr->read(nkUniversalInteger));
	universal_real = nUniversalReal(gr->read(nkUniversalReal));
}

nKind sStandardPackage::kind()
{
	return nkStandardPackage;
}

void sPackageBody::print(graph_printer *gp)
{
	sScope::print(gp);
}

void sPackageBody::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sScope::visit(pre, post, gv);
}

void sPackageBody::write(graph_writer *gw)
{
	sScope::write(gw);
}

void sPackageBody::read(graph_reader *gr)
{
	sScope::read(gr);
}

nKind sPackageBody::kind()
{
	return nkPackageBody;
}

void sType::print(graph_printer *gp)
{
	sDeclaration::print(gp);
}

void sType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDeclaration::visit(pre, post, gv);
}

void sType::write(graph_writer *gw)
{
	sDeclaration::write(gw);
}

void sType::read(graph_reader *gr)
{
	sDeclaration::read(gr);
}

nKind sType::kind()
{
	return nkType;
}

void sConstraint::print(graph_printer *gp)
{
	sPosNode::print(gp);
}

void sConstraint::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
}

void sConstraint::write(graph_writer *gw)
{
	sPosNode::write(gw);
}

void sConstraint::read(graph_reader *gr)
{
	sPosNode::read(gr);
}

nKind sConstraint::kind()
{
	return nkConstraint;
}

void sRange::print(graph_printer *gp)
{
	sConstraint::print(gp);
}

void sRange::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sConstraint::visit(pre, post, gv);
}

void sRange::write(graph_writer *gw)
{
	sConstraint::write(gw);
}

void sRange::read(graph_reader *gr)
{
	sConstraint::read(gr);
}

nKind sRange::kind()
{
	return nkRange;
}

void sExplicitRange::print(graph_printer *gp)
{
	sRange::print(gp);
	gp->print_lab("dir"); PRINT_ATTR(dir, gp);
	gp->print_lab("first"); gp->print(first);
	gp->print_lab("last"); gp->print(last);
}

void sExplicitRange::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sRange::visit(pre, post, gv);
	gv->visit(pre, post, first);
	gv->visit(pre, post, last);
}

void sExplicitRange::write(graph_writer *gw)
{
	sRange::write(gw);
	gw->write(first);
	gw->write(last);
	WRITE_ATTR(dir, gw);
}

void sExplicitRange::read(graph_reader *gr)
{
	sRange::read(gr);
	first = nExpr(gr->read(nkExpr));
	last = nExpr(gr->read(nkExpr));
	READ_ATTR(dir, gr);
}

nKind sExplicitRange::kind()
{
	return nkExplicitRange;
}

void sArrayRange::print(graph_printer *gp)
{
	sRange::print(gp);
	gp->print_lab("type"); gp->print(type);
	gp->print_lab("array"); gp->print(array);
	gp->print_lab("index"); PRINT_ATTR(index, gp);
}

void sArrayRange::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sRange::visit(pre, post, gv);
	gv->visit(pre, post, type);
	gv->visit(pre, post, array);
}

void sArrayRange::write(graph_writer *gw)
{
	sRange::write(gw);
	gw->write(type);
	gw->write(array);
	WRITE_ATTR(index, gw);
}

void sArrayRange::read(graph_reader *gr)
{
	sRange::read(gr);
	type = nType(gr->read(nkType));
	array = nObject(gr->read(nkObject));
	READ_ATTR(index, gr);
}

nKind sArrayRange::kind()
{
	return nkArrayRange;
}

void sArrayAttr_RANGE::print(graph_printer *gp)
{
	sArrayRange::print(gp);
}

void sArrayAttr_RANGE::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrayRange::visit(pre, post, gv);
}

void sArrayAttr_RANGE::write(graph_writer *gw)
{
	sArrayRange::write(gw);
}

void sArrayAttr_RANGE::read(graph_reader *gr)
{
	sArrayRange::read(gr);
}

nKind sArrayAttr_RANGE::kind()
{
	return nkArrayAttr_RANGE;
}

void sArrayAttr_REVERSE_RANGE::print(graph_printer *gp)
{
	sArrayRange::print(gp);
}

void sArrayAttr_REVERSE_RANGE::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrayRange::visit(pre, post, gv);
}

void sArrayAttr_REVERSE_RANGE::write(graph_writer *gw)
{
	sArrayRange::write(gw);
}

void sArrayAttr_REVERSE_RANGE::read(graph_reader *gr)
{
	sArrayRange::read(gr);
}

nKind sArrayAttr_REVERSE_RANGE::kind()
{
	return nkArrayAttr_REVERSE_RANGE;
}

void sPreIndexConstraint::print(graph_printer *gp)
{
	sConstraint::print(gp);
	gp->print_lab("next"); gp->print(next);
}

void sPreIndexConstraint::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sConstraint::visit(pre, post, gv);
	gv->visit(pre, post, next);
}

void sPreIndexConstraint::write(graph_writer *gw)
{
	sConstraint::write(gw);
	gw->write(next);
}

void sPreIndexConstraint::read(graph_reader *gr)
{
	sConstraint::read(gr);
	next = nPreIndexConstraint(gr->read(nkPreIndexConstraint));
}

nKind sPreIndexConstraint::kind()
{
	return nkPreIndexConstraint;
}

nPreIndexConstraint reverse(nPreIndexConstraint &l)
{
	nPreIndexConstraint n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sPreIndexRangeConstraint::print(graph_printer *gp)
{
	sPreIndexConstraint::print(gp);
	gp->print_lab("range"); gp->print(range);
}

void sPreIndexRangeConstraint::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPreIndexConstraint::visit(pre, post, gv);
	gv->visit(pre, post, range);
}

void sPreIndexRangeConstraint::write(graph_writer *gw)
{
	sPreIndexConstraint::write(gw);
	gw->write(range);
}

void sPreIndexRangeConstraint::read(graph_reader *gr)
{
	sPreIndexConstraint::read(gr);
	range = nRange(gr->read(nkRange));
}

nKind sPreIndexRangeConstraint::kind()
{
	return nkPreIndexRangeConstraint;
}

void sPreIndexSubtypeConstraint::print(graph_printer *gp)
{
	sPreIndexConstraint::print(gp);
	gp->print_lab("type"); gp->print(type);
}

void sPreIndexSubtypeConstraint::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPreIndexConstraint::visit(pre, post, gv);
	gv->visit(pre, post, type);
}

void sPreIndexSubtypeConstraint::write(graph_writer *gw)
{
	sPreIndexConstraint::write(gw);
	gw->write(type);
}

void sPreIndexSubtypeConstraint::read(graph_reader *gr)
{
	sPreIndexConstraint::read(gr);
	type = nType(gr->read(nkType));
}

nKind sPreIndexSubtypeConstraint::kind()
{
	return nkPreIndexSubtypeConstraint;
}

void sIndexConstraint::print(graph_printer *gp)
{
	sConstraint::print(gp);
	gp->print_lab("next"); gp->print(next);
	gp->print_lab("type"); gp->print(type);
}

void sIndexConstraint::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sConstraint::visit(pre, post, gv);
	gv->visit(pre, post, next);
	gv->visit(pre, post, type);
}

void sIndexConstraint::write(graph_writer *gw)
{
	sConstraint::write(gw);
	gw->write(next);
	gw->write(type);
}

void sIndexConstraint::read(graph_reader *gr)
{
	sConstraint::read(gr);
	next = nIndexConstraint(gr->read(nkIndexConstraint));
	type = nType(gr->read(nkType));
}

nKind sIndexConstraint::kind()
{
	return nkIndexConstraint;
}

nIndexConstraint reverse(nIndexConstraint &l)
{
	nIndexConstraint n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sIncompleteType::print(graph_printer *gp)
{
	sType::print(gp);
}

void sIncompleteType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sType::visit(pre, post, gv);
}

void sIncompleteType::write(graph_writer *gw)
{
	sType::write(gw);
}

void sIncompleteType::read(graph_reader *gr)
{
	sType::read(gr);
}

nKind sIncompleteType::kind()
{
	return nkIncompleteType;
}

void sSubType::print(graph_printer *gp)
{
	sType::print(gp);
	gp->print_lab("base"); gp->print(base);
	gp->print_lab("constraint"); gp->print(constraint);
	gp->print_lab("resol_func"); gp->print(resol_func);
}

void sSubType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sType::visit(pre, post, gv);
	gv->visit(pre, post, base);
	gv->visit(pre, post, constraint);
	gv->visit(pre, post, resol_func);
}

void sSubType::write(graph_writer *gw)
{
	sType::write(gw);
	gw->write(base);
	gw->write(constraint);
	gw->write(resol_func);
}

void sSubType::read(graph_reader *gr)
{
	sType::read(gr);
	base = nType(gr->read(nkType));
	constraint = nConstraint(gr->read(nkConstraint));
	resol_func = nName(gr->read(nkName));
}

nKind sSubType::kind()
{
	return nkSubType;
}

void sAccessType::print(graph_printer *gp)
{
	sType::print(gp);
	gp->print_lab("designated"); gp->print(designated);
}

void sAccessType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sType::visit(pre, post, gv);
	gv->visit(pre, post, designated);
}

void sAccessType::write(graph_writer *gw)
{
	sType::write(gw);
	gw->write(designated);
}

void sAccessType::read(graph_reader *gr)
{
	sType::read(gr);
	designated = nType(gr->read(nkType));
}

nKind sAccessType::kind()
{
	return nkAccessType;
}

void sScalarType::print(graph_printer *gp)
{
	sType::print(gp);
}

void sScalarType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sType::visit(pre, post, gv);
}

void sScalarType::write(graph_writer *gw)
{
	sType::write(gw);
}

void sScalarType::read(graph_reader *gr)
{
	sType::read(gr);
}

nKind sScalarType::kind()
{
	return nkScalarType;
}

void sNumericType::print(graph_printer *gp)
{
	sScalarType::print(gp);
}

void sNumericType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sScalarType::visit(pre, post, gv);
}

void sNumericType::write(graph_writer *gw)
{
	sScalarType::write(gw);
}

void sNumericType::read(graph_reader *gr)
{
	sScalarType::read(gr);
}

nKind sNumericType::kind()
{
	return nkNumericType;
}

void sIntegerType::print(graph_printer *gp)
{
	sNumericType::print(gp);
}

void sIntegerType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNumericType::visit(pre, post, gv);
}

void sIntegerType::write(graph_writer *gw)
{
	sNumericType::write(gw);
}

void sIntegerType::read(graph_reader *gr)
{
	sNumericType::read(gr);
}

nKind sIntegerType::kind()
{
	return nkIntegerType;
}

void sFloatingType::print(graph_printer *gp)
{
	sNumericType::print(gp);
}

void sFloatingType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNumericType::visit(pre, post, gv);
}

void sFloatingType::write(graph_writer *gw)
{
	sNumericType::write(gw);
}

void sFloatingType::read(graph_reader *gr)
{
	sNumericType::read(gr);
}

nKind sFloatingType::kind()
{
	return nkFloatingType;
}

void sUniversalInteger::print(graph_printer *gp)
{
	sIntegerType::print(gp);
}

void sUniversalInteger::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sIntegerType::visit(pre, post, gv);
}

void sUniversalInteger::write(graph_writer *gw)
{
	sIntegerType::write(gw);
}

void sUniversalInteger::read(graph_reader *gr)
{
	sIntegerType::read(gr);
}

nKind sUniversalInteger::kind()
{
	return nkUniversalInteger;
}

void sUniversalReal::print(graph_printer *gp)
{
	sFloatingType::print(gp);
}

void sUniversalReal::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sFloatingType::visit(pre, post, gv);
}

void sUniversalReal::write(graph_writer *gw)
{
	sFloatingType::write(gw);
}

void sUniversalReal::read(graph_reader *gr)
{
	sFloatingType::read(gr);
}

nKind sUniversalReal::kind()
{
	return nkUniversalReal;
}

void sPhysicalType::print(graph_printer *gp)
{
	sNumericType::print(gp);
	gp->print_lab("first"); gp->print(first);
	gp->print_lab("declaring_subtype"); gp->print(declaring_subtype);
}

void sPhysicalType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNumericType::visit(pre, post, gv);
	gv->visit(pre, post, first);
	gv->visit(pre, post, declaring_subtype);
}

void sPhysicalType::write(graph_writer *gw)
{
	sNumericType::write(gw);
	gw->write(first);
	gw->write(declaring_subtype);
}

void sPhysicalType::read(graph_reader *gr)
{
	sNumericType::read(gr);
	first = nPhysicalUnit(gr->read(nkPhysicalUnit));
	declaring_subtype = nSubType(gr->read(nkSubType));
}

nKind sPhysicalType::kind()
{
	return nkPhysicalType;
}

void sPhysicalUnit::print(graph_printer *gp)
{
	sDeclaration::print(gp);
	gp->print_lab("type"); gp->print(type);
	gp->print_lab("value"); gp->print(value);
	gp->print_lab("next"); gp->print(next);
}

void sPhysicalUnit::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDeclaration::visit(pre, post, gv);
	gv->visit(pre, post, type);
	gv->visit(pre, post, value);
	gv->visit(pre, post, next);
}

void sPhysicalUnit::write(graph_writer *gw)
{
	sDeclaration::write(gw);
	gw->write(type);
	gw->write(value);
	gw->write(next);
}

void sPhysicalUnit::read(graph_reader *gr)
{
	sDeclaration::read(gr);
	type = nPhysicalType(gr->read(nkPhysicalType));
	value = nPhysicalLiteralRef(gr->read(nkPhysicalLiteralRef));
	next = nPhysicalUnit(gr->read(nkPhysicalUnit));
}

nKind sPhysicalUnit::kind()
{
	return nkPhysicalUnit;
}

nPhysicalUnit reverse(nPhysicalUnit &l)
{
	nPhysicalUnit n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sEnumType::print(graph_printer *gp)
{
	sScalarType::print(gp);
	gp->print_lab("first"); gp->print(first);
}

void sEnumType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sScalarType::visit(pre, post, gv);
	gv->visit(pre, post, first);
}

void sEnumType::write(graph_writer *gw)
{
	sScalarType::write(gw);
	gw->write(first);
}

void sEnumType::read(graph_reader *gr)
{
	sScalarType::read(gr);
	first = nEnumLiteral(gr->read(nkEnumLiteral));
}

nKind sEnumType::kind()
{
	return nkEnumType;
}

void sEnumLiteral::print(graph_printer *gp)
{
	sDeclaration::print(gp);
	gp->print_lab("type"); gp->print(type);
	gp->print_lab("next"); gp->print(next);
}

void sEnumLiteral::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDeclaration::visit(pre, post, gv);
	gv->visit(pre, post, type);
	gv->visit(pre, post, next);
}

void sEnumLiteral::write(graph_writer *gw)
{
	sDeclaration::write(gw);
	gw->write(type);
	gw->write(next);
}

void sEnumLiteral::read(graph_reader *gr)
{
	sDeclaration::read(gr);
	type = nEnumType(gr->read(nkEnumType));
	next = nEnumLiteral(gr->read(nkEnumLiteral));
}

nKind sEnumLiteral::kind()
{
	return nkEnumLiteral;
}

nEnumLiteral reverse(nEnumLiteral &l)
{
	nEnumLiteral n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sCompositeType::print(graph_printer *gp)
{
	sType::print(gp);
}

void sCompositeType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sType::visit(pre, post, gv);
}

void sCompositeType::write(graph_writer *gw)
{
	sType::write(gw);
}

void sCompositeType::read(graph_reader *gr)
{
	sType::read(gr);
}

nKind sCompositeType::kind()
{
	return nkCompositeType;
}

void sArrayType::print(graph_printer *gp)
{
	sCompositeType::print(gp);
	gp->print_lab("first_index"); gp->print(first_index);
	gp->print_lab("element_type"); gp->print(element_type);
}

void sArrayType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sCompositeType::visit(pre, post, gv);
	gv->visit(pre, post, first_index);
	gv->visit(pre, post, element_type);
}

void sArrayType::write(graph_writer *gw)
{
	sCompositeType::write(gw);
	gw->write(first_index);
	gw->write(element_type);
}

void sArrayType::read(graph_reader *gr)
{
	sCompositeType::read(gr);
	first_index = nIndexType(gr->read(nkIndexType));
	element_type = nType(gr->read(nkType));
}

nKind sArrayType::kind()
{
	return nkArrayType;
}

void sIndexType::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next"); gp->print(next);
	gp->print_lab("index_type"); gp->print(index_type);
}

void sIndexType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
	gv->visit(pre, post, index_type);
}

void sIndexType::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next);
	gw->write(index_type);
}

void sIndexType::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next = nIndexType(gr->read(nkIndexType));
	index_type = nType(gr->read(nkType));
}

nKind sIndexType::kind()
{
	return nkIndexType;
}

nIndexType reverse(nIndexType &l)
{
	nIndexType n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sSubarrayType::print(graph_printer *gp)
{
	sArrayType::print(gp);
	gp->print_lab("complete_type"); gp->print(complete_type);
}

void sSubarrayType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrayType::visit(pre, post, gv);
	gv->visit(pre, post, complete_type);
}

void sSubarrayType::write(graph_writer *gw)
{
	sArrayType::write(gw);
	gw->write(complete_type);
}

void sSubarrayType::read(graph_reader *gr)
{
	sArrayType::read(gr);
	complete_type = nArrayType(gr->read(nkArrayType));
}

nKind sSubarrayType::kind()
{
	return nkSubarrayType;
}

void sRecordType::print(graph_printer *gp)
{
	sCompositeType::print(gp);
	gp->print_lab("first_element"); gp->print(first_element);
}

void sRecordType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sCompositeType::visit(pre, post, gv);
	gv->visit(pre, post, first_element);
}

void sRecordType::write(graph_writer *gw)
{
	sCompositeType::write(gw);
	gw->write(first_element);
}

void sRecordType::read(graph_reader *gr)
{
	sCompositeType::read(gr);
	first_element = nRecordElement(gr->read(nkRecordElement));
}

nKind sRecordType::kind()
{
	return nkRecordType;
}

void sRecordElement::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next"); gp->print(next);
	gp->print_lab("id"); PRINT_ATTR(id, gp);
	gp->print_lab("type"); gp->print(type);
}

void sRecordElement::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
	gv->visit(pre, post, type);
}

void sRecordElement::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next);
	gw->write(type);
	WRITE_ATTR(id, gw);
}

void sRecordElement::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next = nRecordElement(gr->read(nkRecordElement));
	type = nType(gr->read(nkType));
	READ_ATTR(id, gr);
}

nKind sRecordElement::kind()
{
	return nkRecordElement;
}

nRecordElement reverse(nRecordElement &l)
{
	nRecordElement n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sFileType::print(graph_printer *gp)
{
	sType::print(gp);
	gp->print_lab("content_type"); gp->print(content_type);
}

void sFileType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sType::visit(pre, post, gv);
	gv->visit(pre, post, content_type);
}

void sFileType::write(graph_writer *gw)
{
	sType::write(gw);
	gw->write(content_type);
}

void sFileType::read(graph_reader *gr)
{
	sType::read(gr);
	content_type = nType(gr->read(nkType));
}

nKind sFileType::kind()
{
	return nkFileType;
}

void sDummyType::print(graph_printer *gp)
{
	sType::print(gp);
}

void sDummyType::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sType::visit(pre, post, gv);
}

void sDummyType::write(graph_writer *gw)
{
	sType::write(gw);
}

void sDummyType::read(graph_reader *gr)
{
	sType::read(gr);
}

nKind sDummyType::kind()
{
	return nkDummyType;
}

void sObject::print(graph_printer *gp)
{
	sDeclaration::print(gp);
	gp->print_lab("type"); gp->print(type);
	gp->print_lab("initial_value"); gp->print(initial_value);
}

void sObject::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDeclaration::visit(pre, post, gv);
	gv->visit(pre, post, type);
	gv->visit(pre, post, initial_value);
}

void sObject::write(graph_writer *gw)
{
	sDeclaration::write(gw);
	gw->write(type);
	gw->write(initial_value);
}

void sObject::read(graph_reader *gr)
{
	sDeclaration::read(gr);
	type = nType(gr->read(nkType));
	initial_value = nExpr(gr->read(nkExpr));
}

nKind sObject::kind()
{
	return nkObject;
}

void sVariable::print(graph_printer *gp)
{
	sObject::print(gp);
	gp->print_lab("shared"); PRINT_ATTR(shared, gp);
}

void sVariable::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObject::visit(pre, post, gv);
}

void sVariable::write(graph_writer *gw)
{
	sObject::write(gw);
	WRITE_ATTR(shared, gw);
}

void sVariable::read(graph_reader *gr)
{
	sObject::read(gr);
	READ_ATTR(shared, gr);
}

nKind sVariable::kind()
{
	return nkVariable;
}

void sConstant::print(graph_printer *gp)
{
	sObject::print(gp);
}

void sConstant::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObject::visit(pre, post, gv);
}

void sConstant::write(graph_writer *gw)
{
	sObject::write(gw);
}

void sConstant::read(graph_reader *gr)
{
	sObject::read(gr);
}

nKind sConstant::kind()
{
	return nkConstant;
}

void sConstantBody::print(graph_printer *gp)
{
	sDeclaration::print(gp);
	gp->print_lab("decl"); gp->print(decl);
	gp->print_lab("initial_value"); gp->print(initial_value);
}

void sConstantBody::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDeclaration::visit(pre, post, gv);
	gv->visit(pre, post, decl);
	gv->visit(pre, post, initial_value);
}

void sConstantBody::write(graph_writer *gw)
{
	sDeclaration::write(gw);
	gw->write(decl);
	gw->write(initial_value);
}

void sConstantBody::read(graph_reader *gr)
{
	sDeclaration::read(gr);
	decl = nConstant(gr->read(nkConstant));
	initial_value = nExpr(gr->read(nkExpr));
}

nKind sConstantBody::kind()
{
	return nkConstantBody;
}

void sSignal::print(graph_printer *gp)
{
	sObject::print(gp);
	gp->print_lab("signal_kind"); PRINT_ATTR(signal_kind, gp);
}

void sSignal::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObject::visit(pre, post, gv);
}

void sSignal::write(graph_writer *gw)
{
	sObject::write(gw);
	WRITE_ATTR(signal_kind, gw);
}

void sSignal::read(graph_reader *gr)
{
	sObject::read(gr);
	READ_ATTR(signal_kind, gr);
}

nKind sSignal::kind()
{
	return nkSignal;
}

void sGuardSignal::print(graph_printer *gp)
{
	sSignal::print(gp);
}

void sGuardSignal::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sSignal::visit(pre, post, gv);
}

void sGuardSignal::write(graph_writer *gw)
{
	sSignal::write(gw);
}

void sGuardSignal::read(graph_reader *gr)
{
	sSignal::read(gr);
}

nKind sGuardSignal::kind()
{
	return nkGuardSignal;
}

void sAlias::print(graph_printer *gp)
{
	sObject::print(gp);
}

void sAlias::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObject::visit(pre, post, gv);
}

void sAlias::write(graph_writer *gw)
{
	sObject::write(gw);
}

void sAlias::read(graph_reader *gr)
{
	sObject::read(gr);
}

nKind sAlias::kind()
{
	return nkAlias;
}

void sFile::print(graph_printer *gp)
{
	sObject::print(gp);
	gp->print_lab("open_mode"); gp->print(open_mode);
}

void sFile::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObject::visit(pre, post, gv);
	gv->visit(pre, post, open_mode);
}

void sFile::write(graph_writer *gw)
{
	sObject::write(gw);
	gw->write(open_mode);
}

void sFile::read(graph_reader *gr)
{
	sObject::read(gr);
	open_mode = nExpr(gr->read(nkExpr));
}

nKind sFile::kind()
{
	return nkFile;
}

void sSubprogram::print(graph_printer *gp)
{
	sScope::print(gp);
	gp->print_lab("first_formal"); gp->print(first_formal);
}

void sSubprogram::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sScope::visit(pre, post, gv);
	gv->visit(pre, post, first_formal);
}

void sSubprogram::write(graph_writer *gw)
{
	sScope::write(gw);
	gw->write(first_formal);
}

void sSubprogram::read(graph_reader *gr)
{
	sScope::read(gr);
	first_formal = nInterface(gr->read(nkInterface));
}

nKind sSubprogram::kind()
{
	return nkSubprogram;
}

void sProcedure::print(graph_printer *gp)
{
	sSubprogram::print(gp);
}

void sProcedure::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sSubprogram::visit(pre, post, gv);
}

void sProcedure::write(graph_writer *gw)
{
	sSubprogram::write(gw);
}

void sProcedure::read(graph_reader *gr)
{
	sSubprogram::read(gr);
}

nKind sProcedure::kind()
{
	return nkProcedure;
}

void sFunction::print(graph_printer *gp)
{
	sSubprogram::print(gp);
	gp->print_lab("pure"); PRINT_ATTR(pure, gp);
	gp->print_lab("return_type"); gp->print(return_type);
}

void sFunction::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sSubprogram::visit(pre, post, gv);
	gv->visit(pre, post, return_type);
}

void sFunction::write(graph_writer *gw)
{
	sSubprogram::write(gw);
	gw->write(return_type);
	WRITE_ATTR(pure, gw);
}

void sFunction::read(graph_reader *gr)
{
	sSubprogram::read(gr);
	return_type = nType(gr->read(nkType));
	READ_ATTR(pure, gr);
}

nKind sFunction::kind()
{
	return nkFunction;
}

void sPredefOp::print(graph_printer *gp)
{
	sFunction::print(gp);
}

void sPredefOp::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sFunction::visit(pre, post, gv);
}

void sPredefOp::write(graph_writer *gw)
{
	sFunction::write(gw);
}

void sPredefOp::read(graph_reader *gr)
{
	sFunction::read(gr);
}

nKind sPredefOp::kind()
{
	return nkPredefOp;
}

void sInterface::print(graph_printer *gp)
{
	sObject::print(gp);
	gp->print_lab("next_element"); gp->print(next_element);
	gp->print_lab("object_class"); PRINT_ATTR(object_class, gp);
	gp->print_lab("mode"); PRINT_ATTR(mode, gp);
	gp->print_lab("buffer"); PRINT_ATTR(buffer, gp);
}

void sInterface::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObject::visit(pre, post, gv);
	gv->visit(pre, post, next_element);
}

void sInterface::write(graph_writer *gw)
{
	sObject::write(gw);
	gw->write(next_element);
	WRITE_ATTR(object_class, gw);
	WRITE_ATTR(mode, gw);
	WRITE_ATTR(buffer, gw);
}

void sInterface::read(graph_reader *gr)
{
	sObject::read(gr);
	next_element = nInterface(gr->read(nkInterface));
	READ_ATTR(object_class, gr);
	READ_ATTR(mode, gr);
	READ_ATTR(buffer, gr);
}

nKind sInterface::kind()
{
	return nkInterface;
}

nInterface reverse(nInterface &l)
{
	nInterface n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next_element;
		n->next_element = r;
		r = n;
	}
	return r;
}

void sSubprogramBody::print(graph_printer *gp)
{
	sScope::print(gp);
	gp->print_lab("stats"); gp->print(stats);
}

void sSubprogramBody::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sScope::visit(pre, post, gv);
	gv->visit(pre, post, stats);
}

void sSubprogramBody::write(graph_writer *gw)
{
	sScope::write(gw);
	gw->write(stats);
}

void sSubprogramBody::read(graph_reader *gr)
{
	sScope::read(gr);
	stats = nStatement(gr->read(nkStatement));
}

nKind sSubprogramBody::kind()
{
	return nkSubprogramBody;
}

void sExpr::print(graph_printer *gp)
{
	sPosNode::print(gp);
}

void sExpr::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
}

void sExpr::write(graph_writer *gw)
{
	sPosNode::write(gw);
}

void sExpr::read(graph_reader *gr)
{
	sPosNode::read(gr);
}

nKind sExpr::kind()
{
	return nkExpr;
}

void sUnresolvedName::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("name"); gp->print(name);
}

void sUnresolvedName::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, name);
}

void sUnresolvedName::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(name);
}

void sUnresolvedName::read(graph_reader *gr)
{
	sExpr::read(gr);
	name = nName(gr->read(nkName));
}

nKind sUnresolvedName::kind()
{
	return nkUnresolvedName;
}

void sFunctionCall::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("func"); gp->print(func);
	gp->print_lab("first_actual"); gp->print(first_actual);
}

void sFunctionCall::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, func);
	gv->visit(pre, post, first_actual);
}

void sFunctionCall::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(func);
	gw->write(first_actual);
}

void sFunctionCall::read(graph_reader *gr)
{
	sExpr::read(gr);
	func = nFunction(gr->read(nkFunction));
	first_actual = nAssociation(gr->read(nkAssociation));
}

nKind sFunctionCall::kind()
{
	return nkFunctionCall;
}

void sProcedureCall::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("proc"); gp->print(proc);
	gp->print_lab("first_actual"); gp->print(first_actual);
}

void sProcedureCall::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, proc);
	gv->visit(pre, post, first_actual);
}

void sProcedureCall::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(proc);
	gw->write(first_actual);
}

void sProcedureCall::read(graph_reader *gr)
{
	sExpr::read(gr);
	proc = nProcedure(gr->read(nkProcedure));
	first_actual = nAssociation(gr->read(nkAssociation));
}

nKind sProcedureCall::kind()
{
	return nkProcedureCall;
}

void sAmbgCall::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("first_actual"); gp->print(first_actual);
}

void sAmbgCall::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, first_actual);
}

void sAmbgCall::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(first_actual);
}

void sAmbgCall::read(graph_reader *gr)
{
	sExpr::read(gr);
	first_actual = nNamedAssocElem(gr->read(nkNamedAssocElem));
}

nKind sAmbgCall::kind()
{
	return nkAmbgCall;
}

void sGenAssocElem::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next"); gp->print(next);
}

void sGenAssocElem::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
}

void sGenAssocElem::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next);
}

void sGenAssocElem::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next = nGenAssocElem(gr->read(nkGenAssocElem));
}

nKind sGenAssocElem::kind()
{
	return nkGenAssocElem;
}

nGenAssocElem reverse(nGenAssocElem &l)
{
	nGenAssocElem n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sNamedAssocElem::print(graph_printer *gp)
{
	sGenAssocElem::print(gp);
	gp->print_lab("formal"); gp->print(formal);
	gp->print_lab("actual"); gp->print(actual);
}

void sNamedAssocElem::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sGenAssocElem::visit(pre, post, gv);
	gv->visit(pre, post, formal);
	gv->visit(pre, post, actual);
}

void sNamedAssocElem::write(graph_writer *gw)
{
	sGenAssocElem::write(gw);
	gw->write(formal);
	gw->write(actual);
}

void sNamedAssocElem::read(graph_reader *gr)
{
	sGenAssocElem::read(gr);
	formal = nName(gr->read(nkName));
	actual = nExpr(gr->read(nkExpr));
}

nKind sNamedAssocElem::kind()
{
	return nkNamedAssocElem;
}

void sSubtypeAssocElem::print(graph_printer *gp)
{
	sGenAssocElem::print(gp);
	gp->print_lab("type"); gp->print(type);
}

void sSubtypeAssocElem::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sGenAssocElem::visit(pre, post, gv);
	gv->visit(pre, post, type);
}

void sSubtypeAssocElem::write(graph_writer *gw)
{
	sGenAssocElem::write(gw);
	gw->write(type);
}

void sSubtypeAssocElem::read(graph_reader *gr)
{
	sGenAssocElem::read(gr);
	type = nType(gr->read(nkType));
}

nKind sSubtypeAssocElem::kind()
{
	return nkSubtypeAssocElem;
}

void sRangeAssocElem::print(graph_printer *gp)
{
	sGenAssocElem::print(gp);
	gp->print_lab("range"); gp->print(range);
}

void sRangeAssocElem::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sGenAssocElem::visit(pre, post, gv);
	gv->visit(pre, post, range);
}

void sRangeAssocElem::write(graph_writer *gw)
{
	sGenAssocElem::write(gw);
	gw->write(range);
}

void sRangeAssocElem::read(graph_reader *gr)
{
	sGenAssocElem::read(gr);
	range = nRange(gr->read(nkRange));
}

nKind sRangeAssocElem::kind()
{
	return nkRangeAssocElem;
}

void sAssociation::print(graph_printer *gp)
{
	sNode::print(gp);
	gp->print_lab("next"); gp->print(next);
	gp->print_lab("formal"); gp->print(formal);
	gp->print_lab("formal_conversion"); gp->print(formal_conversion);
	gp->print_lab("actual"); gp->print(actual);
	gp->print_lab("actual_conversion"); gp->print(actual_conversion);
}

void sAssociation::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
	gv->visit(pre, post, formal);
	gv->visit(pre, post, formal_conversion);
	gv->visit(pre, post, actual);
	gv->visit(pre, post, actual_conversion);
}

void sAssociation::write(graph_writer *gw)
{
	sNode::write(gw);
	gw->write(next);
	gw->write(formal);
	gw->write(formal_conversion);
	gw->write(actual);
	gw->write(actual_conversion);
}

void sAssociation::read(graph_reader *gr)
{
	sNode::read(gr);
	next = nAssociation(gr->read(nkAssociation));
	formal = nInterface(gr->read(nkInterface));
	formal_conversion = nDeclaration(gr->read(nkDeclaration));
	actual = nExpr(gr->read(nkExpr));
	actual_conversion = nDeclaration(gr->read(nkDeclaration));
}

nKind sAssociation::kind()
{
	return nkAssociation;
}

nAssociation reverse(nAssociation &l)
{
	nAssociation n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sTypeConversion::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("target_type"); gp->print(target_type);
	gp->print_lab("expression"); gp->print(expression);
}

void sTypeConversion::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, target_type);
	gv->visit(pre, post, expression);
}

void sTypeConversion::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(target_type);
	gw->write(expression);
}

void sTypeConversion::read(graph_reader *gr)
{
	sExpr::read(gr);
	target_type = nType(gr->read(nkType));
	expression = nExpr(gr->read(nkExpr));
}

nKind sTypeConversion::kind()
{
	return nkTypeConversion;
}

void sQualifiedExpr::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("type"); gp->print(type);
	gp->print_lab("expression"); gp->print(expression);
}

void sQualifiedExpr::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, type);
	gv->visit(pre, post, expression);
}

void sQualifiedExpr::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(type);
	gw->write(expression);
}

void sQualifiedExpr::read(graph_reader *gr)
{
	sExpr::read(gr);
	type = nType(gr->read(nkType));
	expression = nExpr(gr->read(nkExpr));
}

nKind sQualifiedExpr::kind()
{
	return nkQualifiedExpr;
}

void sNewExpr::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("type"); gp->print(type);
	gp->print_lab("initial_value"); gp->print(initial_value);
}

void sNewExpr::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, type);
	gv->visit(pre, post, initial_value);
}

void sNewExpr::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(type);
	gw->write(initial_value);
}

void sNewExpr::read(graph_reader *gr)
{
	sExpr::read(gr);
	type = nType(gr->read(nkType));
	initial_value = nExpr(gr->read(nkExpr));
}

nKind sNewExpr::kind()
{
	return nkNewExpr;
}

void sPrimaryExpr::print(graph_printer *gp)
{
	sExpr::print(gp);
}

void sPrimaryExpr::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
}

void sPrimaryExpr::write(graph_writer *gw)
{
	sExpr::write(gw);
}

void sPrimaryExpr::read(graph_reader *gr)
{
	sExpr::read(gr);
}

nKind sPrimaryExpr::kind()
{
	return nkPrimaryExpr;
}

void sOpenExpr::print(graph_printer *gp)
{
	sPrimaryExpr::print(gp);
}

void sOpenExpr::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPrimaryExpr::visit(pre, post, gv);
}

void sOpenExpr::write(graph_writer *gw)
{
	sPrimaryExpr::write(gw);
}

void sOpenExpr::read(graph_reader *gr)
{
	sPrimaryExpr::read(gr);
}

nKind sOpenExpr::kind()
{
	return nkOpenExpr;
}

void sLiteralRef::print(graph_printer *gp)
{
	sPrimaryExpr::print(gp);
	gp->print_lab("value"); PRINT_ATTR(value, gp);
}

void sLiteralRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPrimaryExpr::visit(pre, post, gv);
}

void sLiteralRef::write(graph_writer *gw)
{
	sPrimaryExpr::write(gw);
	WRITE_ATTR(value, gw);
}

void sLiteralRef::read(graph_reader *gr)
{
	sPrimaryExpr::read(gr);
	READ_ATTR(value, gr);
}

nKind sLiteralRef::kind()
{
	return nkLiteralRef;
}

void sAmbgArrayLitRef::print(graph_printer *gp)
{
	sPrimaryExpr::print(gp);
	gp->print_lab("value"); PRINT_ATTR(value, gp);
}

void sAmbgArrayLitRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPrimaryExpr::visit(pre, post, gv);
}

void sAmbgArrayLitRef::write(graph_writer *gw)
{
	sPrimaryExpr::write(gw);
	WRITE_ATTR(value, gw);
}

void sAmbgArrayLitRef::read(graph_reader *gr)
{
	sPrimaryExpr::read(gr);
	READ_ATTR(value, gr);
}

nKind sAmbgArrayLitRef::kind()
{
	return nkAmbgArrayLitRef;
}

void sArrayLiteralRef::print(graph_printer *gp)
{
	sPrimaryExpr::print(gp);
	gp->print_lab("value"); PRINT_ATTR(value, gp);
	gp->print_lab("type"); gp->print(type);
}

void sArrayLiteralRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPrimaryExpr::visit(pre, post, gv);
	gv->visit(pre, post, type);
}

void sArrayLiteralRef::write(graph_writer *gw)
{
	sPrimaryExpr::write(gw);
	gw->write(type);
	WRITE_ATTR(value, gw);
}

void sArrayLiteralRef::read(graph_reader *gr)
{
	sPrimaryExpr::read(gr);
	type = nType(gr->read(nkType));
	READ_ATTR(value, gr);
}

nKind sArrayLiteralRef::kind()
{
	return nkArrayLiteralRef;
}

void sPhysicalLiteralRef::print(graph_printer *gp)
{
	sLiteralRef::print(gp);
	gp->print_lab("unit"); gp->print(unit);
}

void sPhysicalLiteralRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sLiteralRef::visit(pre, post, gv);
	gv->visit(pre, post, unit);
}

void sPhysicalLiteralRef::write(graph_writer *gw)
{
	sLiteralRef::write(gw);
	gw->write(unit);
}

void sPhysicalLiteralRef::read(graph_reader *gr)
{
	sLiteralRef::read(gr);
	unit = nPhysicalUnit(gr->read(nkPhysicalUnit));
}

nKind sPhysicalLiteralRef::kind()
{
	return nkPhysicalLiteralRef;
}

void sAmbgNullExpr::print(graph_printer *gp)
{
	sPrimaryExpr::print(gp);
}

void sAmbgNullExpr::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPrimaryExpr::visit(pre, post, gv);
}

void sAmbgNullExpr::write(graph_writer *gw)
{
	sPrimaryExpr::write(gw);
}

void sAmbgNullExpr::read(graph_reader *gr)
{
	sPrimaryExpr::read(gr);
}

nKind sAmbgNullExpr::kind()
{
	return nkAmbgNullExpr;
}

void sNullExpr::print(graph_printer *gp)
{
	sPrimaryExpr::print(gp);
	gp->print_lab("type"); gp->print(type);
}

void sNullExpr::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPrimaryExpr::visit(pre, post, gv);
	gv->visit(pre, post, type);
}

void sNullExpr::write(graph_writer *gw)
{
	sPrimaryExpr::write(gw);
	gw->write(type);
}

void sNullExpr::read(graph_reader *gr)
{
	sPrimaryExpr::read(gr);
	type = nType(gr->read(nkType));
}

nKind sNullExpr::kind()
{
	return nkNullExpr;
}

void sObjectRef::print(graph_printer *gp)
{
	sPrimaryExpr::print(gp);
}

void sObjectRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPrimaryExpr::visit(pre, post, gv);
}

void sObjectRef::write(graph_writer *gw)
{
	sPrimaryExpr::write(gw);
}

void sObjectRef::read(graph_reader *gr)
{
	sPrimaryExpr::read(gr);
}

nKind sObjectRef::kind()
{
	return nkObjectRef;
}

void sSimpleObjectRef::print(graph_printer *gp)
{
	sObjectRef::print(gp);
	gp->print_lab("object"); gp->print(object);
	gp->print_lab("name"); gp->print(name);
}

void sSimpleObjectRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObjectRef::visit(pre, post, gv);
	gv->visit(pre, post, object);
	gv->visit(pre, post, name);
}

void sSimpleObjectRef::write(graph_writer *gw)
{
	sObjectRef::write(gw);
	gw->write(object);
	gw->write(name);
}

void sSimpleObjectRef::read(graph_reader *gr)
{
	sObjectRef::read(gr);
	object = nObject(gr->read(nkObject));
	name = nName(gr->read(nkName));
}

nKind sSimpleObjectRef::kind()
{
	return nkSimpleObjectRef;
}

void sAccessObjectRef::print(graph_printer *gp)
{
	sObjectRef::print(gp);
	gp->print_lab("access"); gp->print(access);
	gp->print_lab("accessed_type"); gp->print(accessed_type);
}

void sAccessObjectRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObjectRef::visit(pre, post, gv);
	gv->visit(pre, post, access);
	gv->visit(pre, post, accessed_type);
}

void sAccessObjectRef::write(graph_writer *gw)
{
	sObjectRef::write(gw);
	gw->write(access);
	gw->write(accessed_type);
}

void sAccessObjectRef::read(graph_reader *gr)
{
	sObjectRef::read(gr);
	access = nExpr(gr->read(nkExpr));
	accessed_type = nType(gr->read(nkType));
}

nKind sAccessObjectRef::kind()
{
	return nkAccessObjectRef;
}

void sRecordObjectRef::print(graph_printer *gp)
{
	sObjectRef::print(gp);
	gp->print_lab("record"); gp->print(record);
	gp->print_lab("record_type"); gp->print(record_type);
	gp->print_lab("element"); gp->print(element);
}

void sRecordObjectRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObjectRef::visit(pre, post, gv);
	gv->visit(pre, post, record);
	gv->visit(pre, post, record_type);
	gv->visit(pre, post, element);
}

void sRecordObjectRef::write(graph_writer *gw)
{
	sObjectRef::write(gw);
	gw->write(record);
	gw->write(record_type);
	gw->write(element);
}

void sRecordObjectRef::read(graph_reader *gr)
{
	sObjectRef::read(gr);
	record = nExpr(gr->read(nkExpr));
	record_type = nRecordType(gr->read(nkRecordType));
	element = nRecordElement(gr->read(nkRecordElement));
}

nKind sRecordObjectRef::kind()
{
	return nkRecordObjectRef;
}

void sGenericArrayObjectRef::print(graph_printer *gp)
{
	sObjectRef::print(gp);
	gp->print_lab("array"); gp->print(array);
	gp->print_lab("array_type"); gp->print(array_type);
}

void sGenericArrayObjectRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObjectRef::visit(pre, post, gv);
	gv->visit(pre, post, array);
	gv->visit(pre, post, array_type);
}

void sGenericArrayObjectRef::write(graph_writer *gw)
{
	sObjectRef::write(gw);
	gw->write(array);
	gw->write(array_type);
}

void sGenericArrayObjectRef::read(graph_reader *gr)
{
	sObjectRef::read(gr);
	array = nExpr(gr->read(nkExpr));
	array_type = nArrayType(gr->read(nkArrayType));
}

nKind sGenericArrayObjectRef::kind()
{
	return nkGenericArrayObjectRef;
}

void sArrayObjectRef::print(graph_printer *gp)
{
	sGenericArrayObjectRef::print(gp);
	gp->print_lab("first_index"); gp->print(first_index);
}

void sArrayObjectRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sGenericArrayObjectRef::visit(pre, post, gv);
	gv->visit(pre, post, first_index);
}

void sArrayObjectRef::write(graph_writer *gw)
{
	sGenericArrayObjectRef::write(gw);
	gw->write(first_index);
}

void sArrayObjectRef::read(graph_reader *gr)
{
	sGenericArrayObjectRef::read(gr);
	first_index = nIndexValue(gr->read(nkIndexValue));
}

nKind sArrayObjectRef::kind()
{
	return nkArrayObjectRef;
}

void sIndexValue::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next"); gp->print(next);
	gp->print_lab("index"); gp->print(index);
}

void sIndexValue::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
	gv->visit(pre, post, index);
}

void sIndexValue::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next);
	gw->write(index);
}

void sIndexValue::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next = nIndexValue(gr->read(nkIndexValue));
	index = nExpr(gr->read(nkExpr));
}

nKind sIndexValue::kind()
{
	return nkIndexValue;
}

nIndexValue reverse(nIndexValue &l)
{
	nIndexValue n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sSliceObjectRef::print(graph_printer *gp)
{
	sGenericArrayObjectRef::print(gp);
	gp->print_lab("slice"); gp->print(slice);
}

void sSliceObjectRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sGenericArrayObjectRef::visit(pre, post, gv);
	gv->visit(pre, post, slice);
}

void sSliceObjectRef::write(graph_writer *gw)
{
	sGenericArrayObjectRef::write(gw);
	gw->write(slice);
}

void sSliceObjectRef::read(graph_reader *gr)
{
	sGenericArrayObjectRef::read(gr);
	slice = nType(gr->read(nkType));
}

nKind sSliceObjectRef::kind()
{
	return nkSliceObjectRef;
}

void sEnumLitRef::print(graph_printer *gp)
{
	sPrimaryExpr::print(gp);
	gp->print_lab("value"); gp->print(value);
}

void sEnumLitRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPrimaryExpr::visit(pre, post, gv);
	gv->visit(pre, post, value);
}

void sEnumLitRef::write(graph_writer *gw)
{
	sPrimaryExpr::write(gw);
	gw->write(value);
}

void sEnumLitRef::read(graph_reader *gr)
{
	sPrimaryExpr::read(gr);
	value = nEnumLiteral(gr->read(nkEnumLiteral));
}

nKind sEnumLitRef::kind()
{
	return nkEnumLitRef;
}

void sAmbgEnumLitRef::print(graph_printer *gp)
{
	sPrimaryExpr::print(gp);
}

void sAmbgEnumLitRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPrimaryExpr::visit(pre, post, gv);
}

void sAmbgEnumLitRef::write(graph_writer *gw)
{
	sPrimaryExpr::write(gw);
}

void sAmbgEnumLitRef::read(graph_reader *gr)
{
	sPrimaryExpr::read(gr);
}

nKind sAmbgEnumLitRef::kind()
{
	return nkAmbgEnumLitRef;
}

void sAttrSignalRef::print(graph_printer *gp)
{
	sObjectRef::print(gp);
	gp->print_lab("attr_type"); gp->print(attr_type);
	gp->print_lab("signal"); gp->print(signal);
}

void sAttrSignalRef::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sObjectRef::visit(pre, post, gv);
	gv->visit(pre, post, attr_type);
	gv->visit(pre, post, signal);
}

void sAttrSignalRef::write(graph_writer *gw)
{
	sObjectRef::write(gw);
	gw->write(attr_type);
	gw->write(signal);
}

void sAttrSignalRef::read(graph_reader *gr)
{
	sObjectRef::read(gr);
	attr_type = nType(gr->read(nkType));
	signal = nObjectRef(gr->read(nkObjectRef));
}

nKind sAttrSignalRef::kind()
{
	return nkAttrSignalRef;
}

void sAttr_DELAYED::print(graph_printer *gp)
{
	sAttrSignalRef::print(gp);
	gp->print_lab("delay"); gp->print(delay);
}

void sAttr_DELAYED::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSignalRef::visit(pre, post, gv);
	gv->visit(pre, post, delay);
}

void sAttr_DELAYED::write(graph_writer *gw)
{
	sAttrSignalRef::write(gw);
	gw->write(delay);
}

void sAttr_DELAYED::read(graph_reader *gr)
{
	sAttrSignalRef::read(gr);
	delay = nExpr(gr->read(nkExpr));
}

nKind sAttr_DELAYED::kind()
{
	return nkAttr_DELAYED;
}

void sAttr_STABLE::print(graph_printer *gp)
{
	sAttrSignalRef::print(gp);
	gp->print_lab("duration"); gp->print(duration);
}

void sAttr_STABLE::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSignalRef::visit(pre, post, gv);
	gv->visit(pre, post, duration);
}

void sAttr_STABLE::write(graph_writer *gw)
{
	sAttrSignalRef::write(gw);
	gw->write(duration);
}

void sAttr_STABLE::read(graph_reader *gr)
{
	sAttrSignalRef::read(gr);
	duration = nExpr(gr->read(nkExpr));
}

nKind sAttr_STABLE::kind()
{
	return nkAttr_STABLE;
}

void sAttr_QUIET::print(graph_printer *gp)
{
	sAttrSignalRef::print(gp);
	gp->print_lab("duration"); gp->print(duration);
}

void sAttr_QUIET::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSignalRef::visit(pre, post, gv);
	gv->visit(pre, post, duration);
}

void sAttr_QUIET::write(graph_writer *gw)
{
	sAttrSignalRef::write(gw);
	gw->write(duration);
}

void sAttr_QUIET::read(graph_reader *gr)
{
	sAttrSignalRef::read(gr);
	duration = nExpr(gr->read(nkExpr));
}

nKind sAttr_QUIET::kind()
{
	return nkAttr_QUIET;
}

void sAttr_TRANSACTION::print(graph_printer *gp)
{
	sAttrSignalRef::print(gp);
}

void sAttr_TRANSACTION::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSignalRef::visit(pre, post, gv);
}

void sAttr_TRANSACTION::write(graph_writer *gw)
{
	sAttrSignalRef::write(gw);
}

void sAttr_TRANSACTION::read(graph_reader *gr)
{
	sAttrSignalRef::read(gr);
}

nKind sAttr_TRANSACTION::kind()
{
	return nkAttr_TRANSACTION;
}

void sAttrFunctionCall::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("attr_type"); gp->print(attr_type);
}

void sAttrFunctionCall::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, attr_type);
}

void sAttrFunctionCall::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(attr_type);
}

void sAttrFunctionCall::read(graph_reader *gr)
{
	sExpr::read(gr);
	attr_type = nType(gr->read(nkType));
}

nKind sAttrFunctionCall::kind()
{
	return nkAttrFunctionCall;
}

void sAttrSigFunc::print(graph_printer *gp)
{
	sAttrFunctionCall::print(gp);
	gp->print_lab("signal"); gp->print(signal);
}

void sAttrSigFunc::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrFunctionCall::visit(pre, post, gv);
	gv->visit(pre, post, signal);
}

void sAttrSigFunc::write(graph_writer *gw)
{
	sAttrFunctionCall::write(gw);
	gw->write(signal);
}

void sAttrSigFunc::read(graph_reader *gr)
{
	sAttrFunctionCall::read(gr);
	signal = nObjectRef(gr->read(nkObjectRef));
}

nKind sAttrSigFunc::kind()
{
	return nkAttrSigFunc;
}

void sAttr_EVENT::print(graph_printer *gp)
{
	sAttrSigFunc::print(gp);
}

void sAttr_EVENT::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSigFunc::visit(pre, post, gv);
}

void sAttr_EVENT::write(graph_writer *gw)
{
	sAttrSigFunc::write(gw);
}

void sAttr_EVENT::read(graph_reader *gr)
{
	sAttrSigFunc::read(gr);
}

nKind sAttr_EVENT::kind()
{
	return nkAttr_EVENT;
}

void sAttr_ACTIVE::print(graph_printer *gp)
{
	sAttrSigFunc::print(gp);
}

void sAttr_ACTIVE::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSigFunc::visit(pre, post, gv);
}

void sAttr_ACTIVE::write(graph_writer *gw)
{
	sAttrSigFunc::write(gw);
}

void sAttr_ACTIVE::read(graph_reader *gr)
{
	sAttrSigFunc::read(gr);
}

nKind sAttr_ACTIVE::kind()
{
	return nkAttr_ACTIVE;
}

void sAttr_LAST_EVENT::print(graph_printer *gp)
{
	sAttrSigFunc::print(gp);
}

void sAttr_LAST_EVENT::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSigFunc::visit(pre, post, gv);
}

void sAttr_LAST_EVENT::write(graph_writer *gw)
{
	sAttrSigFunc::write(gw);
}

void sAttr_LAST_EVENT::read(graph_reader *gr)
{
	sAttrSigFunc::read(gr);
}

nKind sAttr_LAST_EVENT::kind()
{
	return nkAttr_LAST_EVENT;
}

void sAttr_LAST_ACTIVE::print(graph_printer *gp)
{
	sAttrSigFunc::print(gp);
}

void sAttr_LAST_ACTIVE::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSigFunc::visit(pre, post, gv);
}

void sAttr_LAST_ACTIVE::write(graph_writer *gw)
{
	sAttrSigFunc::write(gw);
}

void sAttr_LAST_ACTIVE::read(graph_reader *gr)
{
	sAttrSigFunc::read(gr);
}

nKind sAttr_LAST_ACTIVE::kind()
{
	return nkAttr_LAST_ACTIVE;
}

void sAttr_LAST_VALUE::print(graph_printer *gp)
{
	sAttrSigFunc::print(gp);
}

void sAttr_LAST_VALUE::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSigFunc::visit(pre, post, gv);
}

void sAttr_LAST_VALUE::write(graph_writer *gw)
{
	sAttrSigFunc::write(gw);
}

void sAttr_LAST_VALUE::read(graph_reader *gr)
{
	sAttrSigFunc::read(gr);
}

nKind sAttr_LAST_VALUE::kind()
{
	return nkAttr_LAST_VALUE;
}

void sAttr_DRIVING::print(graph_printer *gp)
{
	sAttrSigFunc::print(gp);
}

void sAttr_DRIVING::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSigFunc::visit(pre, post, gv);
}

void sAttr_DRIVING::write(graph_writer *gw)
{
	sAttrSigFunc::write(gw);
}

void sAttr_DRIVING::read(graph_reader *gr)
{
	sAttrSigFunc::read(gr);
}

nKind sAttr_DRIVING::kind()
{
	return nkAttr_DRIVING;
}

void sAttr_DRIVING_VALUE::print(graph_printer *gp)
{
	sAttrSigFunc::print(gp);
}

void sAttr_DRIVING_VALUE::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrSigFunc::visit(pre, post, gv);
}

void sAttr_DRIVING_VALUE::write(graph_writer *gw)
{
	sAttrSigFunc::write(gw);
}

void sAttr_DRIVING_VALUE::read(graph_reader *gr)
{
	sAttrSigFunc::read(gr);
}

nKind sAttr_DRIVING_VALUE::kind()
{
	return nkAttr_DRIVING_VALUE;
}

void sAttrTypeFunc::print(graph_printer *gp)
{
	sAttrFunctionCall::print(gp);
	gp->print_lab("prefix"); gp->print(prefix);
	gp->print_lab("argument"); gp->print(argument);
}

void sAttrTypeFunc::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrFunctionCall::visit(pre, post, gv);
	gv->visit(pre, post, prefix);
	gv->visit(pre, post, argument);
}

void sAttrTypeFunc::write(graph_writer *gw)
{
	sAttrFunctionCall::write(gw);
	gw->write(prefix);
	gw->write(argument);
}

void sAttrTypeFunc::read(graph_reader *gr)
{
	sAttrFunctionCall::read(gr);
	prefix = nType(gr->read(nkType));
	argument = nExpr(gr->read(nkExpr));
}

nKind sAttrTypeFunc::kind()
{
	return nkAttrTypeFunc;
}

void sAttr_LEFT::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_LEFT::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_LEFT::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_LEFT::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_LEFT::kind()
{
	return nkAttr_LEFT;
}

void sAttr_RIGHT::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_RIGHT::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_RIGHT::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_RIGHT::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_RIGHT::kind()
{
	return nkAttr_RIGHT;
}

void sAttr_LOW::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_LOW::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_LOW::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_LOW::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_LOW::kind()
{
	return nkAttr_LOW;
}

void sAttr_HIGH::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_HIGH::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_HIGH::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_HIGH::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_HIGH::kind()
{
	return nkAttr_HIGH;
}

void sAttr_ASCENDING::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_ASCENDING::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_ASCENDING::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_ASCENDING::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_ASCENDING::kind()
{
	return nkAttr_ASCENDING;
}

void sAttr_IMAGE::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_IMAGE::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_IMAGE::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_IMAGE::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_IMAGE::kind()
{
	return nkAttr_IMAGE;
}

void sAttr_VALUE::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_VALUE::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_VALUE::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_VALUE::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_VALUE::kind()
{
	return nkAttr_VALUE;
}

void sAttr_POS::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_POS::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_POS::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_POS::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_POS::kind()
{
	return nkAttr_POS;
}

void sAttr_VAL::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_VAL::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_VAL::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_VAL::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_VAL::kind()
{
	return nkAttr_VAL;
}

void sAttr_SUCC::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_SUCC::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_SUCC::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_SUCC::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_SUCC::kind()
{
	return nkAttr_SUCC;
}

void sAttr_PRED::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_PRED::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_PRED::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_PRED::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_PRED::kind()
{
	return nkAttr_PRED;
}

void sAttr_LEFTOF::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_LEFTOF::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_LEFTOF::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_LEFTOF::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_LEFTOF::kind()
{
	return nkAttr_LEFTOF;
}

void sAttr_RIGHTOF::print(graph_printer *gp)
{
	sAttrTypeFunc::print(gp);
}

void sAttr_RIGHTOF::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAttrTypeFunc::visit(pre, post, gv);
}

void sAttr_RIGHTOF::write(graph_writer *gw)
{
	sAttrTypeFunc::write(gw);
}

void sAttr_RIGHTOF::read(graph_reader *gr)
{
	sAttrTypeFunc::read(gr);
}

nKind sAttr_RIGHTOF::kind()
{
	return nkAttr_RIGHTOF;
}

void sArrayAttr::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("attr_type"); gp->print(attr_type);
	gp->print_lab("array"); gp->print(array);
	gp->print_lab("index"); PRINT_ATTR(index, gp);
}

void sArrayAttr::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, attr_type);
	gv->visit(pre, post, array);
}

void sArrayAttr::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(attr_type);
	gw->write(array);
	WRITE_ATTR(index, gw);
}

void sArrayAttr::read(graph_reader *gr)
{
	sExpr::read(gr);
	attr_type = nType(gr->read(nkType));
	array = nObject(gr->read(nkObject));
	READ_ATTR(index, gr);
}

nKind sArrayAttr::kind()
{
	return nkArrayAttr;
}

void sArrayAttr_LEFT::print(graph_printer *gp)
{
	sArrayAttr::print(gp);
}

void sArrayAttr_LEFT::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrayAttr::visit(pre, post, gv);
}

void sArrayAttr_LEFT::write(graph_writer *gw)
{
	sArrayAttr::write(gw);
}

void sArrayAttr_LEFT::read(graph_reader *gr)
{
	sArrayAttr::read(gr);
}

nKind sArrayAttr_LEFT::kind()
{
	return nkArrayAttr_LEFT;
}

void sArrayAttr_RIGHT::print(graph_printer *gp)
{
	sArrayAttr::print(gp);
}

void sArrayAttr_RIGHT::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrayAttr::visit(pre, post, gv);
}

void sArrayAttr_RIGHT::write(graph_writer *gw)
{
	sArrayAttr::write(gw);
}

void sArrayAttr_RIGHT::read(graph_reader *gr)
{
	sArrayAttr::read(gr);
}

nKind sArrayAttr_RIGHT::kind()
{
	return nkArrayAttr_RIGHT;
}

void sArrayAttr_HIGH::print(graph_printer *gp)
{
	sArrayAttr::print(gp);
}

void sArrayAttr_HIGH::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrayAttr::visit(pre, post, gv);
}

void sArrayAttr_HIGH::write(graph_writer *gw)
{
	sArrayAttr::write(gw);
}

void sArrayAttr_HIGH::read(graph_reader *gr)
{
	sArrayAttr::read(gr);
}

nKind sArrayAttr_HIGH::kind()
{
	return nkArrayAttr_HIGH;
}

void sArrayAttr_LOW::print(graph_printer *gp)
{
	sArrayAttr::print(gp);
}

void sArrayAttr_LOW::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrayAttr::visit(pre, post, gv);
}

void sArrayAttr_LOW::write(graph_writer *gw)
{
	sArrayAttr::write(gw);
}

void sArrayAttr_LOW::read(graph_reader *gr)
{
	sArrayAttr::read(gr);
}

nKind sArrayAttr_LOW::kind()
{
	return nkArrayAttr_LOW;
}

void sArrayAttr_ASCENDING::print(graph_printer *gp)
{
	sArrayAttr::print(gp);
}

void sArrayAttr_ASCENDING::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrayAttr::visit(pre, post, gv);
}

void sArrayAttr_ASCENDING::write(graph_writer *gw)
{
	sArrayAttr::write(gw);
}

void sArrayAttr_ASCENDING::read(graph_reader *gr)
{
	sArrayAttr::read(gr);
}

nKind sArrayAttr_ASCENDING::kind()
{
	return nkArrayAttr_ASCENDING;
}

void sArrayAttr_LENGTH::print(graph_printer *gp)
{
	sArrayAttr::print(gp);
}

void sArrayAttr_LENGTH::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrayAttr::visit(pre, post, gv);
}

void sArrayAttr_LENGTH::write(graph_writer *gw)
{
	sArrayAttr::write(gw);
}

void sArrayAttr_LENGTH::read(graph_reader *gr)
{
	sArrayAttr::read(gr);
}

nKind sArrayAttr_LENGTH::kind()
{
	return nkArrayAttr_LENGTH;
}

void sAttributeSpec::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("attr_desig"); PRINT_ATTR(attr_desig, gp);
	gp->print_lab("entities"); gp->print(entities);
	gp->print_lab("value"); gp->print(value);
}

void sAttributeSpec::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, entities);
	gv->visit(pre, post, value);
}

void sAttributeSpec::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(entities);
	gw->write(value);
	WRITE_ATTR(attr_desig, gw);
}

void sAttributeSpec::read(graph_reader *gr)
{
	sPosNode::read(gr);
	entities = nEntitySpec(gr->read(nkEntitySpec));
	value = nExpr(gr->read(nkExpr));
	READ_ATTR(attr_desig, gr);
}

nKind sAttributeSpec::kind()
{
	return nkAttributeSpec;
}

void sEntitySpec::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("names"); gp->print(names);
	gp->print_lab("entity_class"); PRINT_ATTR(entity_class, gp);
}

void sEntitySpec::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, names);
}

void sEntitySpec::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(names);
	WRITE_ATTR(entity_class, gw);
}

void sEntitySpec::read(graph_reader *gr)
{
	sPosNode::read(gr);
	names = nEntityNameList(gr->read(nkEntityNameList));
	READ_ATTR(entity_class, gr);
}

nKind sEntitySpec::kind()
{
	return nkEntitySpec;
}

void sEntityNameList::print(graph_printer *gp)
{
	sPosNode::print(gp);
}

void sEntityNameList::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
}

void sEntityNameList::write(graph_writer *gw)
{
	sPosNode::write(gw);
}

void sEntityNameList::read(graph_reader *gr)
{
	sPosNode::read(gr);
}

nKind sEntityNameList::kind()
{
	return nkEntityNameList;
}

void sEntityNameList_Ids::print(graph_printer *gp)
{
	sEntityNameList::print(gp);
	gp->print_lab("ids"); gp->print(ids);
}

void sEntityNameList_Ids::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sEntityNameList::visit(pre, post, gv);
	gv->visit(pre, post, ids);
}

void sEntityNameList_Ids::write(graph_writer *gw)
{
	sEntityNameList::write(gw);
	gw->write(ids);
}

void sEntityNameList_Ids::read(graph_reader *gr)
{
	sEntityNameList::read(gr);
	ids = nIdList(gr->read(nkIdList));
}

nKind sEntityNameList_Ids::kind()
{
	return nkEntityNameList_Ids;
}

void sEntityNameList_ALL::print(graph_printer *gp)
{
	sEntityNameList::print(gp);
}

void sEntityNameList_ALL::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sEntityNameList::visit(pre, post, gv);
}

void sEntityNameList_ALL::write(graph_writer *gw)
{
	sEntityNameList::write(gw);
}

void sEntityNameList_ALL::read(graph_reader *gr)
{
	sEntityNameList::read(gr);
}

nKind sEntityNameList_ALL::kind()
{
	return nkEntityNameList_ALL;
}

void sEntityNameList_OTHERS::print(graph_printer *gp)
{
	sEntityNameList::print(gp);
}

void sEntityNameList_OTHERS::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sEntityNameList::visit(pre, post, gv);
}

void sEntityNameList_OTHERS::write(graph_writer *gw)
{
	sEntityNameList::write(gw);
}

void sEntityNameList_OTHERS::read(graph_reader *gr)
{
	sEntityNameList::read(gr);
}

nKind sEntityNameList_OTHERS::kind()
{
	return nkEntityNameList_OTHERS;
}

void sAggregate::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("type"); gp->print(type);
}

void sAggregate::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, type);
}

void sAggregate::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(type);
}

void sAggregate::read(graph_reader *gr)
{
	sExpr::read(gr);
	type = nType(gr->read(nkType));
}

nKind sAggregate::kind()
{
	return nkAggregate;
}

void sRecordAggregate::print(graph_printer *gp)
{
	sAggregate::print(gp);
	gp->print_lab("first_assoc"); gp->print(first_assoc);
}

void sRecordAggregate::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAggregate::visit(pre, post, gv);
	gv->visit(pre, post, first_assoc);
}

void sRecordAggregate::write(graph_writer *gw)
{
	sAggregate::write(gw);
	gw->write(first_assoc);
}

void sRecordAggregate::read(graph_reader *gr)
{
	sAggregate::read(gr);
	first_assoc = nRecAggrAssoc(gr->read(nkRecAggrAssoc));
}

nKind sRecordAggregate::kind()
{
	return nkRecordAggregate;
}

void sRecAggrAssoc::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next"); gp->print(next);
	gp->print_lab("elem"); gp->print(elem);
	gp->print_lab("actual"); gp->print(actual);
}

void sRecAggrAssoc::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
	gv->visit(pre, post, elem);
	gv->visit(pre, post, actual);
}

void sRecAggrAssoc::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next);
	gw->write(elem);
	gw->write(actual);
}

void sRecAggrAssoc::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next = nRecAggrAssoc(gr->read(nkRecAggrAssoc));
	elem = nRecordElement(gr->read(nkRecordElement));
	actual = nExpr(gr->read(nkExpr));
}

nKind sRecAggrAssoc::kind()
{
	return nkRecAggrAssoc;
}

nRecAggrAssoc reverse(nRecAggrAssoc &l)
{
	nRecAggrAssoc n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sArrayAggregate::print(graph_printer *gp)
{
	sAggregate::print(gp);
	gp->print_lab("first_assoc"); gp->print(first_assoc);
}

void sArrayAggregate::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAggregate::visit(pre, post, gv);
	gv->visit(pre, post, first_assoc);
}

void sArrayAggregate::write(graph_writer *gw)
{
	sAggregate::write(gw);
	gw->write(first_assoc);
}

void sArrayAggregate::read(graph_reader *gr)
{
	sAggregate::read(gr);
	first_assoc = nArrAggrAssoc(gr->read(nkArrAggrAssoc));
}

nKind sArrayAggregate::kind()
{
	return nkArrayAggregate;
}

void sArrAggrAssoc::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next"); gp->print(next);
	gp->print_lab("actual"); gp->print(actual);
}

void sArrAggrAssoc::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
	gv->visit(pre, post, actual);
}

void sArrAggrAssoc::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next);
	gw->write(actual);
}

void sArrAggrAssoc::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next = nArrAggrAssoc(gr->read(nkArrAggrAssoc));
	actual = nExpr(gr->read(nkExpr));
}

nKind sArrAggrAssoc::kind()
{
	return nkArrAggrAssoc;
}

nArrAggrAssoc reverse(nArrAggrAssoc &l)
{
	nArrAggrAssoc n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sSingleArrAggrAssoc::print(graph_printer *gp)
{
	sArrAggrAssoc::print(gp);
	gp->print_lab("index"); gp->print(index);
}

void sSingleArrAggrAssoc::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrAggrAssoc::visit(pre, post, gv);
	gv->visit(pre, post, index);
}

void sSingleArrAggrAssoc::write(graph_writer *gw)
{
	sArrAggrAssoc::write(gw);
	gw->write(index);
}

void sSingleArrAggrAssoc::read(graph_reader *gr)
{
	sArrAggrAssoc::read(gr);
	index = nExpr(gr->read(nkExpr));
}

nKind sSingleArrAggrAssoc::kind()
{
	return nkSingleArrAggrAssoc;
}

void sRangeArrAggrAssoc::print(graph_printer *gp)
{
	sArrAggrAssoc::print(gp);
	gp->print_lab("range"); gp->print(range);
}

void sRangeArrAggrAssoc::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrAggrAssoc::visit(pre, post, gv);
	gv->visit(pre, post, range);
}

void sRangeArrAggrAssoc::write(graph_writer *gw)
{
	sArrAggrAssoc::write(gw);
	gw->write(range);
}

void sRangeArrAggrAssoc::read(graph_reader *gr)
{
	sArrAggrAssoc::read(gr);
	range = nRange(gr->read(nkRange));
}

nKind sRangeArrAggrAssoc::kind()
{
	return nkRangeArrAggrAssoc;
}

void sSliceArrAggrAssoc::print(graph_printer *gp)
{
	sRangeArrAggrAssoc::print(gp);
}

void sSliceArrAggrAssoc::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sRangeArrAggrAssoc::visit(pre, post, gv);
}

void sSliceArrAggrAssoc::write(graph_writer *gw)
{
	sRangeArrAggrAssoc::write(gw);
}

void sSliceArrAggrAssoc::read(graph_reader *gr)
{
	sRangeArrAggrAssoc::read(gr);
}

nKind sSliceArrAggrAssoc::kind()
{
	return nkSliceArrAggrAssoc;
}

void sOthersArrAggrAssoc::print(graph_printer *gp)
{
	sArrAggrAssoc::print(gp);
}

void sOthersArrAggrAssoc::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sArrAggrAssoc::visit(pre, post, gv);
}

void sOthersArrAggrAssoc::write(graph_writer *gw)
{
	sArrAggrAssoc::write(gw);
}

void sOthersArrAggrAssoc::read(graph_reader *gr)
{
	sArrAggrAssoc::read(gr);
}

nKind sOthersArrAggrAssoc::kind()
{
	return nkOthersArrAggrAssoc;
}

void sAmbgAggregate::print(graph_printer *gp)
{
	sExpr::print(gp);
	gp->print_lab("first_assoc"); gp->print(first_assoc);
}

void sAmbgAggregate::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sExpr::visit(pre, post, gv);
	gv->visit(pre, post, first_assoc);
}

void sAmbgAggregate::write(graph_writer *gw)
{
	sExpr::write(gw);
	gw->write(first_assoc);
}

void sAmbgAggregate::read(graph_reader *gr)
{
	sExpr::read(gr);
	first_assoc = nElemAssoc(gr->read(nkElemAssoc));
}

nKind sAmbgAggregate::kind()
{
	return nkAmbgAggregate;
}

void sArtificialAmbgAggregate::print(graph_printer *gp)
{
	sAmbgAggregate::print(gp);
}

void sArtificialAmbgAggregate::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sAmbgAggregate::visit(pre, post, gv);
}

void sArtificialAmbgAggregate::write(graph_writer *gw)
{
	sAmbgAggregate::write(gw);
}

void sArtificialAmbgAggregate::read(graph_reader *gr)
{
	sAmbgAggregate::read(gr);
}

nKind sArtificialAmbgAggregate::kind()
{
	return nkArtificialAmbgAggregate;
}

void sElemAssoc::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next"); gp->print(next);
	gp->print_lab("first_choice"); gp->print(first_choice);
	gp->print_lab("actual"); gp->print(actual);
}

void sElemAssoc::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
	gv->visit(pre, post, first_choice);
	gv->visit(pre, post, actual);
}

void sElemAssoc::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next);
	gw->write(first_choice);
	gw->write(actual);
}

void sElemAssoc::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next = nElemAssoc(gr->read(nkElemAssoc));
	first_choice = nChoice(gr->read(nkChoice));
	actual = nExpr(gr->read(nkExpr));
}

nKind sElemAssoc::kind()
{
	return nkElemAssoc;
}

nElemAssoc reverse(nElemAssoc &l)
{
	nElemAssoc n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sChoice::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next"); gp->print(next);
}

void sChoice::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
}

void sChoice::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next);
}

void sChoice::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next = nChoice(gr->read(nkChoice));
}

nKind sChoice::kind()
{
	return nkChoice;
}

nChoice reverse(nChoice &l)
{
	nChoice n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sExprChoice::print(graph_printer *gp)
{
	sChoice::print(gp);
	gp->print_lab("expr"); gp->print(expr);
}

void sExprChoice::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sChoice::visit(pre, post, gv);
	gv->visit(pre, post, expr);
}

void sExprChoice::write(graph_writer *gw)
{
	sChoice::write(gw);
	gw->write(expr);
}

void sExprChoice::read(graph_reader *gr)
{
	sChoice::read(gr);
	expr = nExpr(gr->read(nkExpr));
}

nKind sExprChoice::kind()
{
	return nkExprChoice;
}

void sRangeChoice::print(graph_printer *gp)
{
	sChoice::print(gp);
	gp->print_lab("range"); gp->print(range);
	gp->print_lab("actual_is_slice"); PRINT_ATTR(actual_is_slice, gp);
}

void sRangeChoice::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sChoice::visit(pre, post, gv);
	gv->visit(pre, post, range);
}

void sRangeChoice::write(graph_writer *gw)
{
	sChoice::write(gw);
	gw->write(range);
	WRITE_ATTR(actual_is_slice, gw);
}

void sRangeChoice::read(graph_reader *gr)
{
	sChoice::read(gr);
	range = nGenAssocElem(gr->read(nkGenAssocElem));
	READ_ATTR(actual_is_slice, gr);
}

nKind sRangeChoice::kind()
{
	return nkRangeChoice;
}

void sNamedChoice::print(graph_printer *gp)
{
	sChoice::print(gp);
	gp->print_lab("name"); gp->print(name);
}

void sNamedChoice::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sChoice::visit(pre, post, gv);
	gv->visit(pre, post, name);
}

void sNamedChoice::write(graph_writer *gw)
{
	sChoice::write(gw);
	gw->write(name);
}

void sNamedChoice::read(graph_reader *gr)
{
	sChoice::read(gr);
	name = nName(gr->read(nkName));
}

nKind sNamedChoice::kind()
{
	return nkNamedChoice;
}

void sOthersChoice::print(graph_printer *gp)
{
	sChoice::print(gp);
}

void sOthersChoice::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sChoice::visit(pre, post, gv);
}

void sOthersChoice::write(graph_writer *gw)
{
	sChoice::write(gw);
}

void sOthersChoice::read(graph_reader *gr)
{
	sChoice::read(gr);
}

nKind sOthersChoice::kind()
{
	return nkOthersChoice;
}

void sLabel::print(graph_printer *gp)
{
	sDeclaration::print(gp);
	gp->print_lab("stat"); gp->print(stat);
}

void sLabel::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDeclaration::visit(pre, post, gv);
	gv->visit(pre, post, stat);
}

void sLabel::write(graph_writer *gw)
{
	sDeclaration::write(gw);
	gw->write(stat);
}

void sLabel::read(graph_reader *gr)
{
	sDeclaration::read(gr);
	stat = nStatement(gr->read(nkStatement));
}

nKind sLabel::kind()
{
	return nkLabel;
}

void sStatement::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("label"); gp->print(label);
	gp->print_lab("next"); gp->print(next);
}

void sStatement::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, label);
	gv->visit(pre, post, next);
}

void sStatement::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(label);
	gw->write(next);
}

void sStatement::read(graph_reader *gr)
{
	sPosNode::read(gr);
	label = nLabel(gr->read(nkLabel));
	next = nStatement(gr->read(nkStatement));
}

nKind sStatement::kind()
{
	return nkStatement;
}

nStatement reverse(nStatement &l)
{
	nStatement n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sDummyStat::print(graph_printer *gp)
{
	sStatement::print(gp);
}

void sDummyStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
}

void sDummyStat::write(graph_writer *gw)
{
	sStatement::write(gw);
}

void sDummyStat::read(graph_reader *gr)
{
	sStatement::read(gr);
}

nKind sDummyStat::kind()
{
	return nkDummyStat;
}

void sReturnStat::print(graph_printer *gp)
{
	sStatement::print(gp);
	gp->print_lab("value"); gp->print(value);
}

void sReturnStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
	gv->visit(pre, post, value);
}

void sReturnStat::write(graph_writer *gw)
{
	sStatement::write(gw);
	gw->write(value);
}

void sReturnStat::read(graph_reader *gr)
{
	sStatement::read(gr);
	value = nExpr(gr->read(nkExpr));
}

nKind sReturnStat::kind()
{
	return nkReturnStat;
}

void sVarAssignment::print(graph_printer *gp)
{
	sStatement::print(gp);
	gp->print_lab("target"); gp->print(target);
	gp->print_lab("value"); gp->print(value);
}

void sVarAssignment::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
	gv->visit(pre, post, target);
	gv->visit(pre, post, value);
}

void sVarAssignment::write(graph_writer *gw)
{
	sStatement::write(gw);
	gw->write(target);
	gw->write(value);
}

void sVarAssignment::read(graph_reader *gr)
{
	sStatement::read(gr);
	target = nExpr(gr->read(nkExpr));
	value = nExpr(gr->read(nkExpr));
}

nKind sVarAssignment::kind()
{
	return nkVarAssignment;
}

void sIfStat::print(graph_printer *gp)
{
	sStatement::print(gp);
	gp->print_lab("cond"); gp->print(cond);
	gp->print_lab("then_stats"); gp->print(then_stats);
	gp->print_lab("else_stats"); gp->print(else_stats);
}

void sIfStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
	gv->visit(pre, post, cond);
	gv->visit(pre, post, then_stats);
	gv->visit(pre, post, else_stats);
}

void sIfStat::write(graph_writer *gw)
{
	sStatement::write(gw);
	gw->write(cond);
	gw->write(then_stats);
	gw->write(else_stats);
}

void sIfStat::read(graph_reader *gr)
{
	sStatement::read(gr);
	cond = nExpr(gr->read(nkExpr));
	then_stats = nStatement(gr->read(nkStatement));
	else_stats = nStatement(gr->read(nkStatement));
}

nKind sIfStat::kind()
{
	return nkIfStat;
}

void sCaseStat::print(graph_printer *gp)
{
	sStatement::print(gp);
	gp->print_lab("switch_expr"); gp->print(switch_expr);
	gp->print_lab("first_alternative"); gp->print(first_alternative);
}

void sCaseStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
	gv->visit(pre, post, switch_expr);
	gv->visit(pre, post, first_alternative);
}

void sCaseStat::write(graph_writer *gw)
{
	sStatement::write(gw);
	gw->write(switch_expr);
	gw->write(first_alternative);
}

void sCaseStat::read(graph_reader *gr)
{
	sStatement::read(gr);
	switch_expr = nExpr(gr->read(nkExpr));
	first_alternative = nCaseAlternative(gr->read(nkCaseAlternative));
}

nKind sCaseStat::kind()
{
	return nkCaseStat;
}

void sCaseAlternative::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("next"); gp->print(next);
	gp->print_lab("first_choice"); gp->print(first_choice);
	gp->print_lab("stats"); gp->print(stats);
}

void sCaseAlternative::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, next);
	gv->visit(pre, post, first_choice);
	gv->visit(pre, post, stats);
}

void sCaseAlternative::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(next);
	gw->write(first_choice);
	gw->write(stats);
}

void sCaseAlternative::read(graph_reader *gr)
{
	sPosNode::read(gr);
	next = nCaseAlternative(gr->read(nkCaseAlternative));
	first_choice = nChoice(gr->read(nkChoice));
	stats = nStatement(gr->read(nkStatement));
}

nKind sCaseAlternative::kind()
{
	return nkCaseAlternative;
}

nCaseAlternative reverse(nCaseAlternative &l)
{
	nCaseAlternative n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sLoopStat::print(graph_printer *gp)
{
	sStatement::print(gp);
	gp->print_lab("scope"); gp->print(scope);
	gp->print_lab("iteration_scheme"); gp->print(iteration_scheme);
	gp->print_lab("stats"); gp->print(stats);
}

void sLoopStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
	gv->visit(pre, post, scope);
	gv->visit(pre, post, iteration_scheme);
	gv->visit(pre, post, stats);
}

void sLoopStat::write(graph_writer *gw)
{
	sStatement::write(gw);
	gw->write(scope);
	gw->write(iteration_scheme);
	gw->write(stats);
}

void sLoopStat::read(graph_reader *gr)
{
	sStatement::read(gr);
	scope = nLoopScope(gr->read(nkLoopScope));
	iteration_scheme = nIterationScheme(gr->read(nkIterationScheme));
	stats = nStatement(gr->read(nkStatement));
}

nKind sLoopStat::kind()
{
	return nkLoopStat;
}

void sLoopScope::print(graph_printer *gp)
{
	sScope::print(gp);
	gp->print_lab("loop"); gp->print(loop);
}

void sLoopScope::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sScope::visit(pre, post, gv);
	gv->visit(pre, post, loop);
}

void sLoopScope::write(graph_writer *gw)
{
	sScope::write(gw);
	gw->write(loop);
}

void sLoopScope::read(graph_reader *gr)
{
	sScope::read(gr);
	loop = nLoopStat(gr->read(nkLoopStat));
}

nKind sLoopScope::kind()
{
	return nkLoopScope;
}

void sIterationScheme::print(graph_printer *gp)
{
	sPosNode::print(gp);
}

void sIterationScheme::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
}

void sIterationScheme::write(graph_writer *gw)
{
	sPosNode::write(gw);
}

void sIterationScheme::read(graph_reader *gr)
{
	sPosNode::read(gr);
}

nKind sIterationScheme::kind()
{
	return nkIterationScheme;
}

void sWhileScheme::print(graph_printer *gp)
{
	sIterationScheme::print(gp);
	gp->print_lab("condition"); gp->print(condition);
}

void sWhileScheme::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sIterationScheme::visit(pre, post, gv);
	gv->visit(pre, post, condition);
}

void sWhileScheme::write(graph_writer *gw)
{
	sIterationScheme::write(gw);
	gw->write(condition);
}

void sWhileScheme::read(graph_reader *gr)
{
	sIterationScheme::read(gr);
	condition = nExpr(gr->read(nkExpr));
}

nKind sWhileScheme::kind()
{
	return nkWhileScheme;
}

void sForScheme::print(graph_printer *gp)
{
	sIterationScheme::print(gp);
	gp->print_lab("var"); gp->print(var);
	gp->print_lab("range"); gp->print(range);
}

void sForScheme::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sIterationScheme::visit(pre, post, gv);
	gv->visit(pre, post, var);
	gv->visit(pre, post, range);
}

void sForScheme::write(graph_writer *gw)
{
	sIterationScheme::write(gw);
	gw->write(var);
	gw->write(range);
}

void sForScheme::read(graph_reader *gr)
{
	sIterationScheme::read(gr);
	var = nObject(gr->read(nkObject));
	range = nRange(gr->read(nkRange));
}

nKind sForScheme::kind()
{
	return nkForScheme;
}

void sPreForScheme::print(graph_printer *gp)
{
	sIterationScheme::print(gp);
	gp->print_lab("var"); PRINT_ATTR(var, gp);
	gp->print_lab("range"); gp->print(range);
}

void sPreForScheme::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sIterationScheme::visit(pre, post, gv);
	gv->visit(pre, post, range);
}

void sPreForScheme::write(graph_writer *gw)
{
	sIterationScheme::write(gw);
	gw->write(range);
	WRITE_ATTR(var, gw);
}

void sPreForScheme::read(graph_reader *gr)
{
	sIterationScheme::read(gr);
	range = nPreIndexConstraint(gr->read(nkPreIndexConstraint));
	READ_ATTR(var, gr);
}

nKind sPreForScheme::kind()
{
	return nkPreForScheme;
}

void sLoopControlStat::print(graph_printer *gp)
{
	sStatement::print(gp);
	gp->print_lab("loop"); gp->print(loop);
	gp->print_lab("when"); gp->print(when);
}

void sLoopControlStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
	gv->visit(pre, post, loop);
	gv->visit(pre, post, when);
}

void sLoopControlStat::write(graph_writer *gw)
{
	sStatement::write(gw);
	gw->write(loop);
	gw->write(when);
}

void sLoopControlStat::read(graph_reader *gr)
{
	sStatement::read(gr);
	loop = nLoopStat(gr->read(nkLoopStat));
	when = nExpr(gr->read(nkExpr));
}

nKind sLoopControlStat::kind()
{
	return nkLoopControlStat;
}

void sNextStat::print(graph_printer *gp)
{
	sLoopControlStat::print(gp);
}

void sNextStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sLoopControlStat::visit(pre, post, gv);
}

void sNextStat::write(graph_writer *gw)
{
	sLoopControlStat::write(gw);
}

void sNextStat::read(graph_reader *gr)
{
	sLoopControlStat::read(gr);
}

nKind sNextStat::kind()
{
	return nkNextStat;
}

void sExitStat::print(graph_printer *gp)
{
	sLoopControlStat::print(gp);
}

void sExitStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sLoopControlStat::visit(pre, post, gv);
}

void sExitStat::write(graph_writer *gw)
{
	sLoopControlStat::write(gw);
}

void sExitStat::read(graph_reader *gr)
{
	sLoopControlStat::read(gr);
}

nKind sExitStat::kind()
{
	return nkExitStat;
}

void sNullStat::print(graph_printer *gp)
{
	sStatement::print(gp);
}

void sNullStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
}

void sNullStat::write(graph_writer *gw)
{
	sStatement::write(gw);
}

void sNullStat::read(graph_reader *gr)
{
	sStatement::read(gr);
}

nKind sNullStat::kind()
{
	return nkNullStat;
}

void sProcedureCallStat::print(graph_printer *gp)
{
	sStatement::print(gp);
	gp->print_lab("proc"); gp->print(proc);
	gp->print_lab("first_actual"); gp->print(first_actual);
}

void sProcedureCallStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
	gv->visit(pre, post, proc);
	gv->visit(pre, post, first_actual);
}

void sProcedureCallStat::write(graph_writer *gw)
{
	sStatement::write(gw);
	gw->write(proc);
	gw->write(first_actual);
}

void sProcedureCallStat::read(graph_reader *gr)
{
	sStatement::read(gr);
	proc = nProcedure(gr->read(nkProcedure));
	first_actual = nAssociation(gr->read(nkAssociation));
}

nKind sProcedureCallStat::kind()
{
	return nkProcedureCallStat;
}

void sWaitStat::print(graph_printer *gp)
{
	sStatement::print(gp);
	gp->print_lab("first_sensitivity"); gp->print(first_sensitivity);
	gp->print_lab("condition"); gp->print(condition);
	gp->print_lab("timeout"); gp->print(timeout);
}

void sWaitStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
	gv->visit(pre, post, first_sensitivity);
	gv->visit(pre, post, condition);
	gv->visit(pre, post, timeout);
}

void sWaitStat::write(graph_writer *gw)
{
	sStatement::write(gw);
	gw->write(first_sensitivity);
	gw->write(condition);
	gw->write(timeout);
}

void sWaitStat::read(graph_reader *gr)
{
	sStatement::read(gr);
	first_sensitivity = nSignalList(gr->read(nkSignalList));
	condition = nExpr(gr->read(nkExpr));
	timeout = nExpr(gr->read(nkExpr));
}

nKind sWaitStat::kind()
{
	return nkWaitStat;
}

void sSignalList::print(graph_printer *gp)
{
	sNode::print(gp);
	gp->print_lab("signal"); gp->print(signal);
	gp->print_lab("next"); gp->print(next);
}

void sSignalList::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNode::visit(pre, post, gv);
	gv->visit(pre, post, signal);
	gv->visit(pre, post, next);
}

void sSignalList::write(graph_writer *gw)
{
	sNode::write(gw);
	gw->write(signal);
	gw->write(next);
}

void sSignalList::read(graph_reader *gr)
{
	sNode::read(gr);
	signal = nObjectRef(gr->read(nkObjectRef));
	next = nSignalList(gr->read(nkSignalList));
}

nKind sSignalList::kind()
{
	return nkSignalList;
}

nSignalList reverse(nSignalList &l)
{
	nSignalList n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sWaveformElement::print(graph_printer *gp)
{
	sNode::print(gp);
	gp->print_lab("value"); gp->print(value);
	gp->print_lab("after"); gp->print(after);
	gp->print_lab("next"); gp->print(next);
}

void sWaveformElement::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNode::visit(pre, post, gv);
	gv->visit(pre, post, value);
	gv->visit(pre, post, after);
	gv->visit(pre, post, next);
}

void sWaveformElement::write(graph_writer *gw)
{
	sNode::write(gw);
	gw->write(value);
	gw->write(after);
	gw->write(next);
}

void sWaveformElement::read(graph_reader *gr)
{
	sNode::read(gr);
	value = nExpr(gr->read(nkExpr));
	after = nExpr(gr->read(nkExpr));
	next = nWaveformElement(gr->read(nkWaveformElement));
}

nKind sWaveformElement::kind()
{
	return nkWaveformElement;
}

nWaveformElement reverse(nWaveformElement &l)
{
	nWaveformElement n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sSignalAssignment::print(graph_printer *gp)
{
	sStatement::print(gp);
	gp->print_lab("target"); gp->print(target);
	gp->print_lab("transport"); PRINT_ATTR(transport, gp);
	gp->print_lab("first_wave"); gp->print(first_wave);
}

void sSignalAssignment::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
	gv->visit(pre, post, target);
	gv->visit(pre, post, first_wave);
}

void sSignalAssignment::write(graph_writer *gw)
{
	sStatement::write(gw);
	gw->write(target);
	gw->write(first_wave);
	WRITE_ATTR(transport, gw);
}

void sSignalAssignment::read(graph_reader *gr)
{
	sStatement::read(gr);
	target = nExpr(gr->read(nkExpr));
	first_wave = nWaveformElement(gr->read(nkWaveformElement));
	READ_ATTR(transport, gr);
}

nKind sSignalAssignment::kind()
{
	return nkSignalAssignment;
}

void sAssertStat::print(graph_printer *gp)
{
	sStatement::print(gp);
	gp->print_lab("condition"); gp->print(condition);
	gp->print_lab("report"); gp->print(report);
	gp->print_lab("severity"); gp->print(severity);
}

void sAssertStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sStatement::visit(pre, post, gv);
	gv->visit(pre, post, condition);
	gv->visit(pre, post, report);
	gv->visit(pre, post, severity);
}

void sAssertStat::write(graph_writer *gw)
{
	sStatement::write(gw);
	gw->write(condition);
	gw->write(report);
	gw->write(severity);
}

void sAssertStat::read(graph_reader *gr)
{
	sStatement::read(gr);
	condition = nExpr(gr->read(nkExpr));
	report = nExpr(gr->read(nkExpr));
	severity = nExpr(gr->read(nkExpr));
}

nKind sAssertStat::kind()
{
	return nkAssertStat;
}

void sConcurrentStatement::print(graph_printer *gp)
{
	sScope::print(gp);
	gp->print_lab("next_stat"); gp->print(next_stat);
}

void sConcurrentStatement::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sScope::visit(pre, post, gv);
	gv->visit(pre, post, next_stat);
}

void sConcurrentStatement::write(graph_writer *gw)
{
	sScope::write(gw);
	gw->write(next_stat);
}

void sConcurrentStatement::read(graph_reader *gr)
{
	sScope::read(gr);
	next_stat = nConcurrentStatement(gr->read(nkConcurrentStatement));
}

nKind sConcurrentStatement::kind()
{
	return nkConcurrentStatement;
}

nConcurrentStatement reverse(nConcurrentStatement &l)
{
	nConcurrentStatement n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next_stat;
		n->next_stat = r;
		r = n;
	}
	return r;
}

void sProcess::print(graph_printer *gp)
{
	sConcurrentStatement::print(gp);
	gp->print_lab("sensitivities"); gp->print(sensitivities);
	gp->print_lab("stats"); gp->print(stats);
}

void sProcess::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sConcurrentStatement::visit(pre, post, gv);
	gv->visit(pre, post, sensitivities);
	gv->visit(pre, post, stats);
}

void sProcess::write(graph_writer *gw)
{
	sConcurrentStatement::write(gw);
	gw->write(sensitivities);
	gw->write(stats);
}

void sProcess::read(graph_reader *gr)
{
	sConcurrentStatement::read(gr);
	sensitivities = nSignalList(gr->read(nkSignalList));
	stats = nStatement(gr->read(nkStatement));
}

nKind sProcess::kind()
{
	return nkProcess;
}

void sCondalWaveform::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("wave"); gp->print(wave);
	gp->print_lab("condition"); gp->print(condition);
	gp->print_lab("else_wave"); gp->print(else_wave);
}

void sCondalWaveform::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, wave);
	gv->visit(pre, post, condition);
	gv->visit(pre, post, else_wave);
}

void sCondalWaveform::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(wave);
	gw->write(condition);
	gw->write(else_wave);
}

void sCondalWaveform::read(graph_reader *gr)
{
	sPosNode::read(gr);
	wave = nWaveformElement(gr->read(nkWaveformElement));
	condition = nExpr(gr->read(nkExpr));
	else_wave = nCondalWaveform(gr->read(nkCondalWaveform));
}

nKind sCondalWaveform::kind()
{
	return nkCondalWaveform;
}

nCondalWaveform reverse(nCondalWaveform &l)
{
	nCondalWaveform n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->else_wave;
		n->else_wave = r;
		r = n;
	}
	return r;
}

void sCondalSignalAssign::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("target"); gp->print(target);
	gp->print_lab("transport"); PRINT_ATTR(transport, gp);
	gp->print_lab("wave"); gp->print(wave);
}

void sCondalSignalAssign::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, target);
	gv->visit(pre, post, wave);
}

void sCondalSignalAssign::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(target);
	gw->write(wave);
	WRITE_ATTR(transport, gw);
}

void sCondalSignalAssign::read(graph_reader *gr)
{
	sPosNode::read(gr);
	target = nExpr(gr->read(nkExpr));
	wave = nCondalWaveform(gr->read(nkCondalWaveform));
	READ_ATTR(transport, gr);
}

nKind sCondalSignalAssign::kind()
{
	return nkCondalSignalAssign;
}

void sComponent::print(graph_printer *gp)
{
	sConcurrentStatement::print(gp);
	gp->print_lab("first_generic"); gp->print(first_generic);
	gp->print_lab("first_port"); gp->print(first_port);
}

void sComponent::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sConcurrentStatement::visit(pre, post, gv);
	gv->visit(pre, post, first_generic);
	gv->visit(pre, post, first_port);
}

void sComponent::write(graph_writer *gw)
{
	sConcurrentStatement::write(gw);
	gw->write(first_generic);
	gw->write(first_port);
}

void sComponent::read(graph_reader *gr)
{
	sConcurrentStatement::read(gr);
	first_generic = nInterface(gr->read(nkInterface));
	first_port = nInterface(gr->read(nkInterface));
}

nKind sComponent::kind()
{
	return nkComponent;
}

void sBlock::print(graph_printer *gp)
{
	sComponent::print(gp);
	gp->print_lab("stats"); gp->print(stats);
	gp->print_lab("specs"); gp->print(specs);
}

void sBlock::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sComponent::visit(pre, post, gv);
	gv->visit(pre, post, stats);
	gv->visit(pre, post, specs);
}

void sBlock::write(graph_writer *gw)
{
	sComponent::write(gw);
	gw->write(stats);
	gw->write(specs);
}

void sBlock::read(graph_reader *gr)
{
	sComponent::read(gr);
	stats = nConcurrentStatement(gr->read(nkConcurrentStatement));
	specs = nConfigSpec(gr->read(nkConfigSpec));
}

nKind sBlock::kind()
{
	return nkBlock;
}

void sEntity::print(graph_printer *gp)
{
	sBlock::print(gp);
}

void sEntity::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sBlock::visit(pre, post, gv);
}

void sEntity::write(graph_writer *gw)
{
	sBlock::write(gw);
}

void sEntity::read(graph_reader *gr)
{
	sBlock::read(gr);
}

nKind sEntity::kind()
{
	return nkEntity;
}

void sArchitecture::print(graph_printer *gp)
{
	sBlock::print(gp);
}

void sArchitecture::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sBlock::visit(pre, post, gv);
}

void sArchitecture::write(graph_writer *gw)
{
	sBlock::write(gw);
}

void sArchitecture::read(graph_reader *gr)
{
	sBlock::read(gr);
}

nKind sArchitecture::kind()
{
	return nkArchitecture;
}

void sBlockStat::print(graph_printer *gp)
{
	sBlock::print(gp);
	gp->print_lab("binding"); gp->print(binding);
}

void sBlockStat::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sBlock::visit(pre, post, gv);
	gv->visit(pre, post, binding);
}

void sBlockStat::write(graph_writer *gw)
{
	sBlock::write(gw);
	gw->write(binding);
}

void sBlockStat::read(graph_reader *gr)
{
	sBlock::read(gr);
	binding = nBindingIndic(gr->read(nkBindingIndic));
}

nKind sBlockStat::kind()
{
	return nkBlockStat;
}

void sComponentInst::print(graph_printer *gp)
{
	sConcurrentStatement::print(gp);
	gp->print_lab("binding"); gp->print(binding);
	gp->print_lab("config"); gp->print(config);
}

void sComponentInst::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sConcurrentStatement::visit(pre, post, gv);
	gv->visit(pre, post, binding);
	gv->visit(pre, post, config);
}

void sComponentInst::write(graph_writer *gw)
{
	sConcurrentStatement::write(gw);
	gw->write(binding);
	gw->write(config);
}

void sComponentInst::read(graph_reader *gr)
{
	sConcurrentStatement::read(gr);
	binding = nBindingIndic(gr->read(nkBindingIndic));
	config = nConfigSpec(gr->read(nkConfigSpec));
}

nKind sComponentInst::kind()
{
	return nkComponentInst;
}

void sConfigSpec::print(graph_printer *gp)
{
	sPosNode::print(gp);
	gp->print_lab("comps"); gp->print(comps);
	gp->print_lab("binding"); gp->print(binding);
	gp->print_lab("next"); gp->print(next);
}

void sConfigSpec::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
	gv->visit(pre, post, comps);
	gv->visit(pre, post, binding);
	gv->visit(pre, post, next);
}

void sConfigSpec::write(graph_writer *gw)
{
	sPosNode::write(gw);
	gw->write(comps);
	gw->write(binding);
	gw->write(next);
}

void sConfigSpec::read(graph_reader *gr)
{
	sPosNode::read(gr);
	comps = nComponentSpec(gr->read(nkComponentSpec));
	binding = nBindingIndic(gr->read(nkBindingIndic));
	next = nConfigSpec(gr->read(nkConfigSpec));
}

nKind sConfigSpec::kind()
{
	return nkConfigSpec;
}

nConfigSpec reverse(nConfigSpec &l)
{
	nConfigSpec n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next;
		n->next = r;
		r = n;
	}
	return r;
}

void sComponentSpec::print(graph_printer *gp)
{
	sNode::print(gp);
	gp->print_lab("ids"); gp->print(ids);
	gp->print_lab("comp"); gp->print(comp);
}

void sComponentSpec::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNode::visit(pre, post, gv);
	gv->visit(pre, post, ids);
	gv->visit(pre, post, comp);
}

void sComponentSpec::write(graph_writer *gw)
{
	sNode::write(gw);
	gw->write(ids);
	gw->write(comp);
}

void sComponentSpec::read(graph_reader *gr)
{
	sNode::read(gr);
	ids = nInstList(gr->read(nkInstList));
	comp = nComponent(gr->read(nkComponent));
}

nKind sComponentSpec::kind()
{
	return nkComponentSpec;
}

void sInstList::print(graph_printer *gp)
{
	sPosNode::print(gp);
}

void sInstList::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sPosNode::visit(pre, post, gv);
}

void sInstList::write(graph_writer *gw)
{
	sPosNode::write(gw);
}

void sInstList::read(graph_reader *gr)
{
	sPosNode::read(gr);
}

nKind sInstList::kind()
{
	return nkInstList;
}

void sInstList_Ids::print(graph_printer *gp)
{
	sInstList::print(gp);
	gp->print_lab("ids"); gp->print(ids);
}

void sInstList_Ids::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sInstList::visit(pre, post, gv);
	gv->visit(pre, post, ids);
}

void sInstList_Ids::write(graph_writer *gw)
{
	sInstList::write(gw);
	gw->write(ids);
}

void sInstList_Ids::read(graph_reader *gr)
{
	sInstList::read(gr);
	ids = nIdList(gr->read(nkIdList));
}

nKind sInstList_Ids::kind()
{
	return nkInstList_Ids;
}

void sInstList_ALL::print(graph_printer *gp)
{
	sInstList::print(gp);
}

void sInstList_ALL::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sInstList::visit(pre, post, gv);
}

void sInstList_ALL::write(graph_writer *gw)
{
	sInstList::write(gw);
}

void sInstList_ALL::read(graph_reader *gr)
{
	sInstList::read(gr);
}

nKind sInstList_ALL::kind()
{
	return nkInstList_ALL;
}

void sInstList_OTHERS::print(graph_printer *gp)
{
	sInstList::print(gp);
}

void sInstList_OTHERS::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sInstList::visit(pre, post, gv);
}

void sInstList_OTHERS::write(graph_writer *gw)
{
	sInstList::write(gw);
}

void sInstList_OTHERS::read(graph_reader *gr)
{
	sInstList::read(gr);
}

nKind sInstList_OTHERS::kind()
{
	return nkInstList_OTHERS;
}

void sBindingIndic::print(graph_printer *gp)
{
	sNode::print(gp);
	gp->print_lab("unit"); gp->print(unit);
	gp->print_lab("generic_assoc"); gp->print(generic_assoc);
	gp->print_lab("port_assoc"); gp->print(port_assoc);
}

void sBindingIndic::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNode::visit(pre, post, gv);
	gv->visit(pre, post, unit);
	gv->visit(pre, post, generic_assoc);
	gv->visit(pre, post, port_assoc);
}

void sBindingIndic::write(graph_writer *gw)
{
	sNode::write(gw);
	gw->write(unit);
	gw->write(generic_assoc);
	gw->write(port_assoc);
}

void sBindingIndic::read(graph_reader *gr)
{
	sNode::read(gr);
	unit = nComponent(gr->read(nkComponent));
	generic_assoc = nAssociation(gr->read(nkAssociation));
	port_assoc = nAssociation(gr->read(nkAssociation));
}

nKind sBindingIndic::kind()
{
	return nkBindingIndic;
}

void sIncrementalBindingIndic::print(graph_printer *gp)
{
	sNode::print(gp);
	gp->print_lab("unit"); gp->print(unit);
	gp->print_lab("generic_assoc"); gp->print(generic_assoc);
	gp->print_lab("port_assoc"); gp->print(port_assoc);
}

void sIncrementalBindingIndic::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNode::visit(pre, post, gv);
	gv->visit(pre, post, unit);
	gv->visit(pre, post, generic_assoc);
	gv->visit(pre, post, port_assoc);
}

void sIncrementalBindingIndic::write(graph_writer *gw)
{
	sNode::write(gw);
	gw->write(unit);
	gw->write(generic_assoc);
	gw->write(port_assoc);
}

void sIncrementalBindingIndic::read(graph_reader *gr)
{
	sNode::read(gr);
	unit = nComponent(gr->read(nkComponent));
	generic_assoc = nNamedAssocElem(gr->read(nkNamedAssocElem));
	port_assoc = nNamedAssocElem(gr->read(nkNamedAssocElem));
}

nKind sIncrementalBindingIndic::kind()
{
	return nkIncrementalBindingIndic;
}

void sConfiguration::print(graph_printer *gp)
{
	sComponent::print(gp);
	gp->print_lab("entity"); gp->print(entity);
	gp->print_lab("config"); gp->print(config);
}

void sConfiguration::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sComponent::visit(pre, post, gv);
	gv->visit(pre, post, entity);
	gv->visit(pre, post, config);
}

void sConfiguration::write(graph_writer *gw)
{
	sComponent::write(gw);
	gw->write(entity);
	gw->write(config);
}

void sConfiguration::read(graph_reader *gr)
{
	sComponent::read(gr);
	entity = nEntity(gr->read(nkEntity));
	config = nBlockConfig(gr->read(nkBlockConfig));
}

nKind sConfiguration::kind()
{
	return nkConfiguration;
}

void sBaseConfig::print(graph_printer *gp)
{
	sScope::print(gp);
	gp->print_lab("next_config"); gp->print(next_config);
}

void sBaseConfig::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sScope::visit(pre, post, gv);
	gv->visit(pre, post, next_config);
}

void sBaseConfig::write(graph_writer *gw)
{
	sScope::write(gw);
	gw->write(next_config);
}

void sBaseConfig::read(graph_reader *gr)
{
	sScope::read(gr);
	next_config = nBaseConfig(gr->read(nkBaseConfig));
}

nKind sBaseConfig::kind()
{
	return nkBaseConfig;
}

nBaseConfig reverse(nBaseConfig &l)
{
	nBaseConfig n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->next_config;
		n->next_config = r;
		r = n;
	}
	return r;
}

void sBlockConfig::print(graph_printer *gp)
{
	sBaseConfig::print(gp);
	gp->print_lab("block"); gp->print(block);
	gp->print_lab("configs"); gp->print(configs);
}

void sBlockConfig::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sBaseConfig::visit(pre, post, gv);
	gv->visit(pre, post, block);
	gv->visit(pre, post, configs);
}

void sBlockConfig::write(graph_writer *gw)
{
	sBaseConfig::write(gw);
	gw->write(block);
	gw->write(configs);
}

void sBlockConfig::read(graph_reader *gr)
{
	sBaseConfig::read(gr);
	block = nBlock(gr->read(nkBlock));
	configs = nBaseConfig(gr->read(nkBaseConfig));
}

nKind sBlockConfig::kind()
{
	return nkBlockConfig;
}

void sCompConfig::print(graph_printer *gp)
{
	sBaseConfig::print(gp);
	gp->print_lab("comp_spec"); gp->print(comp_spec);
	gp->print_lab("comps"); gp->print(comps);
	gp->print_lab("binding"); gp->print(binding);
	gp->print_lab("config"); gp->print(config);
}

void sCompConfig::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sBaseConfig::visit(pre, post, gv);
	gv->visit(pre, post, comp_spec);
	gv->visit(pre, post, comps);
	gv->visit(pre, post, binding);
	gv->visit(pre, post, config);
}

void sCompConfig::write(graph_writer *gw)
{
	sBaseConfig::write(gw);
	gw->write(comp_spec);
	gw->write(comps);
	gw->write(binding);
	gw->write(config);
}

void sCompConfig::read(graph_reader *gr)
{
	sBaseConfig::read(gr);
	comp_spec = nComponentSpec(gr->read(nkComponentSpec));
	comps = nCompInstList(gr->read(nkCompInstList));
	binding = nBindingIndic(gr->read(nkBindingIndic));
	config = nBlockConfig(gr->read(nkBlockConfig));
}

nKind sCompConfig::kind()
{
	return nkCompConfig;
}

void sCompInstList::print(graph_printer *gp)
{
	sNode::print(gp);
	gp->print_lab("link"); gp->print(link);
	gp->print_lab("inst"); gp->print(inst);
}

void sCompInstList::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNode::visit(pre, post, gv);
	gv->visit(pre, post, link);
	gv->visit(pre, post, inst);
}

void sCompInstList::write(graph_writer *gw)
{
	sNode::write(gw);
	gw->write(link);
	gw->write(inst);
}

void sCompInstList::read(graph_reader *gr)
{
	sNode::read(gr);
	link = nCompInstList(gr->read(nkCompInstList));
	inst = nComponentInst(gr->read(nkComponentInst));
}

nKind sCompInstList::kind()
{
	return nkCompInstList;
}

nCompInstList reverse(nCompInstList &l)
{
	nCompInstList n, n2, r = NULL;
	for(n = l; n; n = n2) {
		n2 = n->link;
		n->link = r;
		r = n;
	}
	return r;
}

void sDummy::print(graph_printer *gp)
{
	sNode::print(gp);
}

void sDummy::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sNode::visit(pre, post, gv);
}

void sDummy::write(graph_writer *gw)
{
	sNode::write(gw);
}

void sDummy::read(graph_reader *gr)
{
	sNode::read(gr);
}

nKind sDummy::kind()
{
	return nkDummy;
}

void sAssociationList::print(graph_printer *gp)
{
	sDummy::print(gp);
}

void sAssociationList::visit(graph_visit_f *pre, graph_visit_f *post, graph_visitor *gv)
{
	sDummy::visit(pre, post, gv);
}

void sAssociationList::write(graph_writer *gw)
{
	sDummy::write(gw);
}

void sAssociationList::read(graph_reader *gr)
{
	sDummy::read(gr);
}

nKind sAssociationList::kind()
{
	return nkAssociationList;
}
