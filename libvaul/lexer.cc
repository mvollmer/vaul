/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 34
#define YY_END_OF_BUFFER 35
static yyconst short int yy_accept[96] =
    {   0,
        0,    0,   35,   33,    1,   31,   23,   33,   33,    2,
        3,    4,    5,    7,    8,    9,   10,   24,   25,   27,
       12,   13,   16,   18,   17,   26,   26,   22,    0,   29,
        0,   29,    0,    6,    0,   19,    0,    0,   27,    0,
        0,    0,   11,   14,   21,   20,   15,   26,    0,    0,
        0,   28,    0,   32,    0,   27,    0,    0,   27,    0,
        0,   27,    0,    0,    0,   27,    0,    0,    0,   27,
        0,   27,    0,   30,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   27,    0,    0,    0,    0,    0,   27,
       27,    0,   27,    0,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    7,    7,   25,   26,   25,   25,   27,   25,
       28,   28,   28,   28,   28,   28,   28,   28,   29,   28,
       28,   28,   28,   28,   28,   28,   28,   30,   28,   28,
        7,    7,    7,    7,   31,    7,   32,   33,   32,   32,

       34,   32,   35,   35,   35,   35,   35,   35,   35,   35,
       36,   35,   35,   35,   35,   35,   35,   35,   35,   37,
       35,   35,    7,   38,    7,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[39] =
    {   0,
        1,    2,    1,    2,    3,    4,    2,    5,    2,    2,
        2,    2,    2,    2,    2,    2,    6,    2,    7,    8,
        2,    2,    2,    2,    7,    7,    7,    9,    9,    9,
       10,    7,    7,    7,    9,    9,    9,    2
    } ;

static yyconst short int yy_base[113] =
    {   0,
        0,    0,  219,  220,  220,  220,  220,  213,  209,  220,
        0,  220,  220,  203,  220,  220,  199,  220,  191,   33,
      190,  220,   17,  188,  187,  175,   37,  220,  200,  198,
      194,  191,  188,  220,  193,  220,    0,  174,    0,    0,
       30,  173,  220,  220,  220,  220,  220,  159,  158,    0,
        0,  220,  185,  220,   41,   32,   45,  166,   24,   43,
       46,   44,    0,   63,   64,   56,  161,    0,   62,   57,
       68,   42,  160,  220,   81,   84,   88,   89,   84,   86,
       82,   90,  157,   91,   95,   99,   87,   94,  143,   92,
       97,  113,  102,  112,  220,  132,  141,  150,  154,  164,

      122,  120,  117,  101,  171,  176,  184,  190,   50,   49,
      197,  201
    } ;

static yyconst short int yy_def[113] =
    {   0,
       95,    1,   95,   95,   95,   95,   95,   96,   97,   95,
       98,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   99,   99,   95,   96,   95,
       97,   95,   95,   95,  100,   95,  101,   95,   20,  102,
       95,   95,   95,   95,   95,   95,   95,   99,   99,  103,
      104,   95,  100,   95,  105,   95,  106,   95,   95,  107,
      108,   95,  109,  105,  105,   95,   95,  110,  106,   95,
      106,   95,   95,   95,  107,  107,  108,  108,   95,  111,
      112,   95,   95,   95,  111,  111,  112,  112,   95,   95,
       95,   95,   95,   95,    0,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95
    } ;

static yyconst short int yy_nxt[259] =
    {   0,
        4,    5,    6,    7,    8,    4,    4,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   26,   26,   27,   27,
        4,   26,   27,   26,   26,   27,   27,   28,   37,   44,
       45,   50,   72,   58,   51,   58,   62,   74,   59,   38,
       66,   39,   40,   74,   73,   81,   80,   63,   41,   41,
       72,   68,   67,   42,   70,   41,   41,   49,   62,   95,
       79,   65,   73,   76,   66,   71,   78,   79,   68,   63,
       95,   70,   41,   82,   95,   74,   67,   95,   95,   41,
       82,   62,   71,   65,   95,   74,   95,   83,   95,   83,

       62,   70,   84,   89,   95,   89,   70,   61,   90,   91,
       93,   76,   88,   95,   95,   91,   86,   88,   78,   95,
       93,   92,   94,   60,   95,   86,   57,   92,   55,   95,
       93,   91,   94,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       48,   90,   48,   48,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   64,   84,   64,   64,   72,   66,
       64,   69,   69,   69,   59,   69,   75,   54,   95,   49,
       75,   39,   56,   75,   77,   54,   77,   52,   31,   77,

       85,   32,   29,   85,   30,   49,   85,   87,   87,   47,
       87,   46,   43,   36,   35,   34,   32,   30,   95,    3,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95
    } ;

static yyconst short int yy_chk[259] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   20,   23,
       23,   27,   59,   41,   27,   41,   55,   60,   41,   20,
       56,   20,   20,   61,   59,  110,  109,   55,   56,   20,
       72,   57,   56,   20,   57,   56,   20,   27,   64,   65,
       62,   55,   72,   60,   66,   57,   61,   62,   69,   64,
       65,   69,   66,   70,   71,   75,   66,   71,   76,   66,
       70,   80,   69,   64,   65,   77,   78,   79,   71,   79,

       85,   81,   79,   82,   86,   82,   87,  104,   82,   84,
       90,   75,   81,   88,   76,   91,   80,   87,   77,   78,
       93,   84,   90,  103,   88,   85,  102,   91,  101,   86,
       94,   92,   93,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       99,   89,   99,   99,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  105,   83,  105,  105,   73,   67,
      105,  106,  106,  106,   58,  106,  107,   53,   49,   48,
      107,   42,   38,  107,  108,   35,  108,   33,   32,  108,

      111,   31,   30,  111,   29,   26,  111,  112,  112,   25,
      112,   24,   21,   19,   17,   14,    9,    8,    3,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 1 "lexer.ll"
#define INITIAL 0
/* flex scanner.

 This file is based on `vhdl.lex' by Thomas Dettmer. `vhdl.lex' carries
 the following notice:

 ************** VHDL scanner in LEX format **********
 *
 * Version 0.2 Wed Aug 11, 1993
 *
 * This scanner is derived from a scanner of the ALLIANCE CAD toolset,
 * release 1.1. That toolset was written from:
 *   MASI/CAO-VLSI CAD Team
 *   Laboratoire MASI/CAO-VLSI
 *   Tour 55-65, 2eme etage, Porte 13
 *   Universite Pierre et Marie Curie (PARIS VI)
 *   4, place Jussieu 75252 PARIS Cedex 05, FRANCE
 * The ALLIANCE CAD Toolset can be obtained from ftp site : ftp-masi.ibp.fr    
 *
 * This scanner is avail at: ftp.cs.utwente.nl in pub/src/VHDL/Grammar
 * A corresponding Yacc grammar is available at the same site
 *
 * author of this derived scanner version:
 * Thomas Dettmer
 * Dortmund University
 * Dept. of Computer Scienc, LS1
 * PB 500 500
 * D-44221 Dortmund (Germany)
 * Phone: +49-231-755-6464
 * e-mail: dettmer@ls1.informatik.uni-dortmund.de
 *
 * Please report discovered bugs, critics, suggestions
 * and changes you make to dettmer@ls1.informatik.uni-dortmund.de
 * a list of those that reported repaired (hopefully) errors can be found
 * at the end
 *
 ****************************************************************
 * 
 * This file is intended not to be used for commercial purposes
 * without permission of the University of Dortmund
 *
 * NOTE THAT THERE IS NO WARRANTY FOR CORRECTNES, COMPLETENESS, SUPPORT
 * OR ANYTHING ELSE.
 *******************************************************

 Modifications and actions written by mvo@nt.e-technik.uni-dortmund.de

*/
#line 49 "lexer.ll"

#include <vaul/lexer.h>

#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <vaulutil.h>
#include <ctype.h>

inline static void str_to_name(char *n)
{
    while(*n) {
	*n = tolower(*n);
	n++;
    }
}

#include "parser.tab.h"

#define YY_DECL int vaul_lexer::lex(vaul_yystype *val, vaul_yyltype *loc)

#define set_loc()	{ loc->first_line = lineno; }
#define YY_USER_ACTION	set_loc();

#define MVL_LG_MC 15
#define MVL_NB_MC 81

int MVL_LINNUM=1;

typedef struct {
	char nom[MVL_LG_MC];
	int kval;
	} el_mc;

static el_mc tab_mc []=
  {
    {"abs"	    ,t_ABS},
    {"access"	    ,t_ACCESS},
    {"after"	    ,t_AFTER},
    {"alias"	    ,t_ALIAS},
    {"all"	    ,t_ALL},
    {"and"	    ,t_AND},
    {"architecture" ,t_ARCHITECTURE},
    {"array"	    ,t_ARRAY},
    {"assert"	    ,t_ASSERT},
    {"attribute"    ,t_ATTRIBUTE},

    {"begin"	    ,t_BEGIN},
    {"block"	    ,t_BLOCK},
    {"body"	    ,t_BODY},
    {"buffer"	    ,t_BUFFER},
    {"bus"	    ,t_BUS},

    {"case"	    ,t_CASE},
    {"component"    ,t_COMPONENT},
    {"configuration"	,t_CONFIGURATION},
    {"constant"	    ,t_CONSTANT},

    {"disconnect"   ,t_DISCONNECT},
    {"downto"	    ,t_DOWNTO},

    {"else"	    ,t_ELSE},
    {"elsif"	    ,t_ELSIF},
    {"end"	    ,t_END},
    {"entity"	    ,t_ENTITY},
    {"exit"	    ,t_EXIT},

    {"file"	    ,t_FILE},
    {"for"	    ,t_FOR},
    {"function"	    ,t_FUNCTION},

    {"generate"	    ,t_GENERATE},
    {"generic"	    ,t_GENERIC},
    {"guarded"	    ,t_GUARDED},

    {"if"	    ,t_IF},
    {"in"	    ,t_IN},
    {"inout"	    ,t_INOUT},
    {"is"	    ,t_IS},

    {"label"	    ,t_LABEL},
    {"library"	    ,t_LIBRARY},
    {"linkage"	    ,t_LINKAGE},
    {"loop"	    ,t_LOOP},

    {"map"	    ,t_MAP},
    {"mod"	    ,t_MOD},

    {"nand"	    ,t_NAND},
    {"new"	    ,t_NEW},
    {"next"	    ,t_NEXT},
    {"nor"	    ,t_NOR},
    {"not"	    ,t_NOT},
    {"null"	    ,t_NULL},

    {"of"	    ,t_OF},
    {"on"	    ,t_ON},
    {"open"	    ,t_OPEN},
    {"or"	    ,t_OR},
    {"others"	    ,t_OTHERS},
    {"out"	    ,t_OUT},

    {"package"	    ,t_PACKAGE},
    {"port"	    ,t_PORT},
    {"procedure"    ,t_PROCEDURE},
    {"process"	    ,t_PROCESS},

    {"range"	    ,t_RANGE},
    {"record"	    ,t_RECORD},
    {"register"	    ,t_REGISTER},
    {"rem"	    ,t_REM},
    {"report"	    ,t_REPORT},
    {"return"	    ,t_RETURN},

    {"select"	    ,t_SELECT},
    {"severity"	    ,t_SEVERITY},
    {"signal"	    ,t_SIGNAL},
    {"subtype"	    ,t_SUBTYPE},

    {"then"	    ,t_THEN},
    {"to"	    ,t_TO},
    {"transport"    ,t_TRANSPORT},
    {"type"	    ,t_TYPE},

    {"units"	    ,t_UNITS},
    {"until"	    ,t_UNTIL},
    {"use"	    ,t_USE},

    {"variable"	    ,t_VARIABLE},

    {"wait"	    ,t_WAIT},
    {"when"	    ,t_WHEN},
    {"while"	    ,t_WHILE},
    {"with"	    ,t_WITH},

    {"xor"	    ,t_XOR}
};

typedef int cmpfunc_t(const void *, const void *);

static int find_mc(char *s)
{
    char l[strlen(s)+1];
    strcpy(l, s);
    str_to_name(l);
    el_mc *pt = (el_mc *) bsearch(l, tab_mc, MVL_NB_MC, sizeof(el_mc),
			  (cmpfunc_t *)strcmp);
    if (pt==NULL)
	return(-1);
    else
	return(pt->kval);
}


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 226 "lexer.ll"


	    if(stopped) return 0;


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 96 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 220 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 230 "lexer.ll"
/* nothing */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 232 "lexer.ll"
return t_Ampersand;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 233 "lexer.ll"
return t_Apostrophe;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 234 "lexer.ll"
return t_LeftParen;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 235 "lexer.ll"
return t_RightParen;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 236 "lexer.ll"
return t_DoubleStar;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 237 "lexer.ll"
return t_Star;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 238 "lexer.ll"
return t_Plus;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 239 "lexer.ll"
return t_Comma;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 240 "lexer.ll"
return t_Minus;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 241 "lexer.ll"
return t_VarAsgn;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 242 "lexer.ll"
return t_Colon;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 243 "lexer.ll"
return t_Semicolon;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 244 "lexer.ll"
return t_LESym;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 245 "lexer.ll"
return t_GESym;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 246 "lexer.ll"
return t_LTSym;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 247 "lexer.ll"
return t_GTSym;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 248 "lexer.ll"
return t_EQSym;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 249 "lexer.ll"
return t_NESym;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 250 "lexer.ll"
return t_Arrow;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 251 "lexer.ll"
return t_Box;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 252 "lexer.ll"
return t_Bar;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 253 "lexer.ll"
return t_Bar;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 254 "lexer.ll"
return t_Dot;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 255 "lexer.ll"
return t_Slash;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 257 "lexer.ll"
{

	    int itoken;
	    itoken=find_mc(yytext);
	    if (itoken== -1) {
		val->text = pool.add(yytext);
		return t_Identifier;
	    } else
		return itoken;
	}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 269 "lexer.ll"
{

	    val->text = pool.add(yytext);
	    return t_AbstractLit;
	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 276 "lexer.ll"
{

	    val->text = pool.add(yytext);
	    return t_CharacterLit;
	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 282 "lexer.ll"
{

	    val->text = pool.add(yytext);
	    return t_StringLit;
	}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 288 "lexer.ll"
{

	    val->text = expand_bitstring(yytext);
	    return t_StringLit;
	}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 294 "lexer.ll"
lineno++;
	YY_BREAK
case 32:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 296 "lexer.ll"
/* comment */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 298 "lexer.ll"
{   
	    if(prt)
		prt->fprintf(log, "%?illegal character '0x%02x'\n",
				     this, (unsigned char)yytext[0]);
	}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 305 "lexer.ll"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 96 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 96 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 95);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 305 "lexer.ll"


int yyFlexLexer::yylex()
{
    fatal("internal lexer fuck up\n");
    return 0;
}

vaul_lexer::vaul_lexer(char *fn, FILE *f)
{
    close_file = 0;
    file = NULL;
    filename = xstrdup(fn);
    lineno = 1;
    prt = NULL;

    if(f == NULL) {
	if(!(f = fopen(fn, "r"))) {
	    set_error();
	    return;
	}
	close_file = 1;
    }
    file = f;

    stopped = false;
}

vaul_lexer::~vaul_lexer()
{
    if(close_file)
	fclose(file);
    free(filename);
}

void vaul_lexer::stop()
{
    stopped = true;
}

int vaul_lexer::LexerInput(char *buf, int max_size)
{
    if(!fgets(buf, max_size, file))
	return 0;
    return strlen(buf);
}

void vaul_lexer::LexerError(char *m)
{
    if(prt)
	prt->fprintf(log, "%?%s %C\n", this, m, this);
    else
	fprintf(stderr, "%s:%d: %s at %s\n", filename, lineno, m, context());
}

bool is_abstract_literal(char *tok)
{
    return isdigit(*tok);
}

bool is_integer_literal(char *tok)
{
    return is_abstract_literal(tok) && !strchr(tok, '.');
}

bool is_real_literal(char *tok)
{
    return is_abstract_literal(tok) && strchr(tok, '.');
}

bool is_character_literal(char *tok)
{
    return tok[0] == '\'';
}

bool is_string_literal(char *tok)
{
    return tok[0] == '"';
}

char *vaul_lexer::expand_bitstring(const char *tok)
{
    char buf[strlen(tok)*4];
    char *bp = buf;

    char bid = tolower(tok[0]);
    int bits = (bid == 'b'? 1 : bid == 'o'? 3 : bid == 'x'? 4 : 0);
    if(bits == 0 || tok[1] != '"' || tok[strlen(tok)-1] != '"') {
	prt->fprintf(log, "%?illegal bitstring literal\n", this);
	return NULL;
    }

    *bp++ = '"';
    for(const char *cp = tok+2; *cp != '"'; cp++) {
	if(*cp == '_')
	    continue;
	int dig = tolower(*cp) - '0';
	if(dig > 10)
	    dig -= 'a'-'9'-1;
	if(dig >= (1 << bits)) {
	    prt->fprintf(log, "%?illegal digit '%c' in bitstring literal\n",
			 this, *cp);
	    dig = 0;
	}

	for(int i = bits-1; i >= 0; i--)
	    *bp++ = (dig & (1 << i))? '1' : '0';
    }
    *bp++ = '"';
    *bp++ = '\0';
//  prt->fprintf(log, "%?xxx - expanded '%s' to '%s'\n", this, tok, buf);
    return pool.add(buf);
}

#if defined(sun) && !defined(__sysvr4__)
extern "C" int strcasecmp(const char *, const char *);
#endif

bool vaul_name_eq(const char *n1, const char *n2)
{
    if(n1 == NULL || n2 == NULL)
	return false;
    if(n1[0] == '\\' || n1[0] == '\'')
	return !strcmp(n1, n2);
    else
	return !strcasecmp(n1, n2);
}
